
CANSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c0  080037c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037c0  080037c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037c0  080037c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  080037d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080037d4  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a49a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c3  00000000  00000000  0002a4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002bd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002c5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188d8  00000000  00000000  0002cd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0f4  00000000  00000000  000455f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef4a  00000000  00000000  0004f6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de636  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b9c  00000000  00000000  000de688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800375c 	.word	0x0800375c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800375c 	.word	0x0800375c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b087      	sub	sp, #28
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb6f 	bl	8000908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f83d 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f921 	bl	8000474 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f901 	bl	8000438 <MX_DMA_Init>
  MX_CAN_Init();
 8000236:	f000 f897 	bl	8000368 <MX_CAN_Init>
  MX_USART2_UART_Init();
 800023a:	f000 f8cd 	bl	80003d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  CAN_Config();
 800023e:	f000 f981 	bl	8000544 <CAN_Config>

  HAL_UART_Receive_DMA (&huart2, UART_rxBuffer, 1);
 8000242:	4915      	ldr	r1, [pc, #84]	; (8000298 <main+0x78>)
 8000244:	4b15      	ldr	r3, [pc, #84]	; (800029c <main+0x7c>)
 8000246:	2201      	movs	r2, #1
 8000248:	0018      	movs	r0, r3
 800024a:	f002 fc7c 	bl	8002b46 <HAL_UART_Receive_DMA>

  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4a13      	ldr	r2, [pc, #76]	; (80002a0 <main+0x80>)
 8000252:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000254:	c313      	stmia	r3!, {r0, r1, r4}
 8000256:	6811      	ldr	r1, [r2, #0]
 8000258:	6019      	str	r1, [r3, #0]
 800025a:	8892      	ldrh	r2, [r2, #4]
 800025c:	809a      	strh	r2, [r3, #4]
  HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);
 800025e:	1d39      	adds	r1, r7, #4
 8000260:	480e      	ldr	r0, [pc, #56]	; (800029c <main+0x7c>)
 8000262:	230a      	movs	r3, #10
 8000264:	2212      	movs	r2, #18
 8000266:	f002 fbc5 	bl	80029f4 <HAL_UART_Transmit>
  HAL_Delay(1000);
 800026a:	23fa      	movs	r3, #250	; 0xfa
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fbae 	bl	80009d0 <HAL_Delay>
	 /*  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
	  HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);// Sending in normal mode
	  HAL_Delay(1000);
	 */

	  if (UART_rxBuffer[0] == 110)
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <main+0x78>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b6e      	cmp	r3, #110	; 0x6e
 800027a:	d1fb      	bne.n	8000274 <main+0x54>
	  {
		  uint8_t Test[] = "FIN";
 800027c:	003b      	movs	r3, r7
 800027e:	4a09      	ldr	r2, [pc, #36]	; (80002a4 <main+0x84>)
 8000280:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, Test, sizeof(Test), 10);
 8000282:	0039      	movs	r1, r7
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <main+0x7c>)
 8000286:	230a      	movs	r3, #10
 8000288:	2204      	movs	r2, #4
 800028a:	f002 fbb3 	bl	80029f4 <HAL_UART_Transmit>
		  UART_rxBuffer[0] = 0;
 800028e:	4b02      	ldr	r3, [pc, #8]	; (8000298 <main+0x78>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
	  if (UART_rxBuffer[0] == 110)
 8000294:	e7ee      	b.n	8000274 <main+0x54>
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	20000154 	.word	0x20000154
 800029c:	20000050 	.word	0x20000050
 80002a0:	08003774 	.word	0x08003774
 80002a4:	004e4946 	.word	0x004e4946

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b099      	sub	sp, #100	; 0x64
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	242c      	movs	r4, #44	; 0x2c
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2334      	movs	r3, #52	; 0x34
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f003 fa47 	bl	800374c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	231c      	movs	r3, #28
 80002c0:	18fb      	adds	r3, r7, r3
 80002c2:	0018      	movs	r0, r3
 80002c4:	2310      	movs	r3, #16
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f003 fa3f 	bl	800374c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ce:	003b      	movs	r3, r7
 80002d0:	0018      	movs	r0, r3
 80002d2:	231c      	movs	r3, #28
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f003 fa38 	bl	800374c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002dc:	0021      	movs	r1, r4
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2201      	movs	r2, #1
 80002e2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2201      	movs	r2, #1
 80002e8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2202      	movs	r2, #2
 80002ee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	0252      	lsls	r2, r2, #9
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2280      	movs	r2, #128	; 0x80
 80002fc:	0352      	lsls	r2, r2, #13
 80002fe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2200      	movs	r2, #0
 8000304:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	187b      	adds	r3, r7, r1
 8000308:	0018      	movs	r0, r3
 800030a:	f001 fd21 	bl	8001d50 <HAL_RCC_OscConfig>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000312:	f000 f97d 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	211c      	movs	r1, #28
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2207      	movs	r2, #7
 800031c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2202      	movs	r2, #2
 8000322:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2200      	movs	r2, #0
 800032e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000330:	187b      	adds	r3, r7, r1
 8000332:	2101      	movs	r1, #1
 8000334:	0018      	movs	r0, r3
 8000336:	f002 f891 	bl	800245c <HAL_RCC_ClockConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800033e:	f000 f967 	bl	8000610 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000342:	003b      	movs	r3, r7
 8000344:	2202      	movs	r2, #2
 8000346:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000348:	003b      	movs	r3, r7
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034e:	003b      	movs	r3, r7
 8000350:	0018      	movs	r0, r3
 8000352:	f002 f9fd 	bl	8002750 <HAL_RCCEx_PeriphCLKConfig>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800035a:	f000 f959 	bl	8000610 <Error_Handler>
  }
}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	b019      	add	sp, #100	; 0x64
 8000364:	bd90      	pop	{r4, r7, pc}
	...

08000368 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_CAN_Init+0x68>)
 800036e:	4a19      	ldr	r2, [pc, #100]	; (80003d4 <MX_CAN_Init+0x6c>)
 8000370:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000372:	4b17      	ldr	r3, [pc, #92]	; (80003d0 <MX_CAN_Init+0x68>)
 8000374:	2210      	movs	r2, #16
 8000376:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <MX_CAN_Init+0x68>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800037e:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_CAN_Init+0x68>)
 8000380:	2280      	movs	r2, #128	; 0x80
 8000382:	0452      	lsls	r2, r2, #17
 8000384:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000386:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <MX_CAN_Init+0x68>)
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	0252      	lsls	r2, r2, #9
 800038c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <MX_CAN_Init+0x68>)
 8000390:	2280      	movs	r2, #128	; 0x80
 8000392:	0392      	lsls	r2, r2, #14
 8000394:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_CAN_Init+0x68>)
 8000398:	2200      	movs	r2, #0
 800039a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_CAN_Init+0x68>)
 800039e:	2200      	movs	r2, #0
 80003a0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_CAN_Init+0x68>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_CAN_Init+0x68>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_CAN_Init+0x68>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_CAN_Init+0x68>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <MX_CAN_Init+0x68>)
 80003bc:	0018      	movs	r0, r3
 80003be:	f000 fb2b 	bl	8000a18 <HAL_CAN_Init>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80003c6:	f000 f923 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000028 	.word	0x20000028
 80003d4:	40006400 	.word	0x40006400

080003d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003dc:	4b14      	ldr	r3, [pc, #80]	; (8000430 <MX_USART2_UART_Init+0x58>)
 80003de:	4a15      	ldr	r2, [pc, #84]	; (8000434 <MX_USART2_UART_Init+0x5c>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003e2:	4b13      	ldr	r3, [pc, #76]	; (8000430 <MX_USART2_UART_Init+0x58>)
 80003e4:	22e1      	movs	r2, #225	; 0xe1
 80003e6:	0252      	lsls	r2, r2, #9
 80003e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <MX_USART2_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_USART2_UART_Init+0x58>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <MX_USART2_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_USART2_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_USART2_UART_Init+0x58>)
 8000410:	2200      	movs	r2, #0
 8000412:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <MX_USART2_UART_Init+0x58>)
 8000416:	2200      	movs	r2, #0
 8000418:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <MX_USART2_UART_Init+0x58>)
 800041c:	0018      	movs	r0, r3
 800041e:	f002 fa95 	bl	800294c <HAL_UART_Init>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000426:	f000 f8f3 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000050 	.word	0x20000050
 8000434:	40004400 	.word	0x40004400

08000438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_DMA_Init+0x38>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_DMA_Init+0x38>)
 8000444:	2101      	movs	r1, #1
 8000446:	430a      	orrs	r2, r1
 8000448:	615a      	str	r2, [r3, #20]
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_DMA_Init+0x38>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	2201      	movs	r2, #1
 8000450:	4013      	ands	r3, r2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	2100      	movs	r1, #0
 800045a:	200b      	movs	r0, #11
 800045c:	f001 f918 	bl	8001690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000460:	200b      	movs	r0, #11
 8000462:	f001 f92a 	bl	80016ba <HAL_NVIC_EnableIRQ>

}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	40021000 	.word	0x40021000

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b089      	sub	sp, #36	; 0x24
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	240c      	movs	r4, #12
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2314      	movs	r3, #20
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f003 f961 	bl	800374c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048a:	4b24      	ldr	r3, [pc, #144]	; (800051c <MX_GPIO_Init+0xa8>)
 800048c:	695a      	ldr	r2, [r3, #20]
 800048e:	4b23      	ldr	r3, [pc, #140]	; (800051c <MX_GPIO_Init+0xa8>)
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	03c9      	lsls	r1, r1, #15
 8000494:	430a      	orrs	r2, r1
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	4b20      	ldr	r3, [pc, #128]	; (800051c <MX_GPIO_Init+0xa8>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	03db      	lsls	r3, r3, #15
 80004a0:	4013      	ands	r3, r2
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b1d      	ldr	r3, [pc, #116]	; (800051c <MX_GPIO_Init+0xa8>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b1c      	ldr	r3, [pc, #112]	; (800051c <MX_GPIO_Init+0xa8>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	0289      	lsls	r1, r1, #10
 80004b0:	430a      	orrs	r2, r1
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	4b19      	ldr	r3, [pc, #100]	; (800051c <MX_GPIO_Init+0xa8>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	029b      	lsls	r3, r3, #10
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b16      	ldr	r3, [pc, #88]	; (800051c <MX_GPIO_Init+0xa8>)
 80004c4:	695a      	ldr	r2, [r3, #20]
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <MX_GPIO_Init+0xa8>)
 80004c8:	2180      	movs	r1, #128	; 0x80
 80004ca:	02c9      	lsls	r1, r1, #11
 80004cc:	430a      	orrs	r2, r1
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	4b12      	ldr	r3, [pc, #72]	; (800051c <MX_GPIO_Init+0xa8>)
 80004d2:	695a      	ldr	r2, [r3, #20]
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	02db      	lsls	r3, r3, #11
 80004d8:	4013      	ands	r3, r2
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004de:	2390      	movs	r3, #144	; 0x90
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	2200      	movs	r2, #0
 80004e4:	2120      	movs	r1, #32
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 fc14 	bl	8001d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004ec:	0021      	movs	r1, r4
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2220      	movs	r2, #32
 80004f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2201      	movs	r2, #1
 80004f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000506:	187a      	adds	r2, r7, r1
 8000508:	2390      	movs	r3, #144	; 0x90
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fa88 	bl	8001a24 <HAL_GPIO_Init>

}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	b009      	add	sp, #36	; 0x24
 800051a:	bd90      	pop	{r4, r7, pc}
 800051c:	40021000 	.word	0x40021000

08000520 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800052a:	4a05      	ldr	r2, [pc, #20]	; (8000540 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	2100      	movs	r1, #0
 8000530:	f000 fca8 	bl	8000e84 <HAL_CAN_GetRxMessage>
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	2000014c 	.word	0x2000014c
 8000540:	20000118 	.word	0x20000118

08000544 <CAN_Config>:

void CAN_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterBank = 0;
 800054a:	003b      	movs	r3, r7
 800054c:	2200      	movs	r2, #0
 800054e:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000550:	003b      	movs	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000556:	003b      	movs	r3, r7
 8000558:	2201      	movs	r2, #1
 800055a:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x320 << 5;
 800055c:	003b      	movs	r3, r7
 800055e:	22c8      	movs	r2, #200	; 0xc8
 8000560:	01d2      	lsls	r2, r2, #7
 8000562:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8000564:	003b      	movs	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0xFFF << 5;
 800056a:	003b      	movs	r3, r7
 800056c:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <CAN_Config+0x90>)
 800056e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000576:	003b      	movs	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800057c:	003b      	movs	r3, r7
 800057e:	2201      	movs	r2, #1
 8000580:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000582:	003b      	movs	r3, r7
 8000584:	220e      	movs	r2, #14
 8000586:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000588:	003a      	movs	r2, r7
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <CAN_Config+0x94>)
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fb40 	bl	8000c14 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <CAN_Config+0x94>)
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fc2e 	bl	8000df8 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <CAN_Config+0x94>)
 800059e:	2102      	movs	r1, #2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fd8b 	bl	80010bc <HAL_CAN_ActivateNotification>

  TxHeader.StdId = 0x320;
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <CAN_Config+0x98>)
 80005a8:	22c8      	movs	r2, #200	; 0xc8
 80005aa:	0092      	lsls	r2, r2, #2
 80005ac:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0x01;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <CAN_Config+0x98>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <CAN_Config+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <CAN_Config+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 2;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <CAN_Config+0x98>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <CAN_Config+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	751a      	strb	r2, [r3, #20]
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b00a      	add	sp, #40	; 0x28
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	0001ffe0 	.word	0x0001ffe0
 80005d8:	20000028 	.word	0x20000028
 80005dc:	20000134 	.word	0x20000134

080005e0 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, UART_rxBuffer, 1, 100);
 80005e8:	4907      	ldr	r1, [pc, #28]	; (8000608 <HAL_UART_RxCpltCallback+0x28>)
 80005ea:	4808      	ldr	r0, [pc, #32]	; (800060c <HAL_UART_RxCpltCallback+0x2c>)
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	2201      	movs	r2, #1
 80005f0:	f002 fa00 	bl	80029f4 <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart2, UART_rxBuffer, 1);
 80005f4:	4904      	ldr	r1, [pc, #16]	; (8000608 <HAL_UART_RxCpltCallback+0x28>)
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_UART_RxCpltCallback+0x2c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	0018      	movs	r0, r3
 80005fc:	f002 faa3 	bl	8002b46 <HAL_UART_Receive_DMA>
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b002      	add	sp, #8
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000154 	.word	0x20000154
 800060c:	20000050 	.word	0x20000050

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <HAL_MspInit+0x44>)
 8000624:	699a      	ldr	r2, [r3, #24]
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_MspInit+0x44>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	619a      	str	r2, [r3, #24]
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <HAL_MspInit+0x44>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <HAL_MspInit+0x44>)
 800063c:	69da      	ldr	r2, [r3, #28]
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <HAL_MspInit+0x44>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	0549      	lsls	r1, r1, #21
 8000644:	430a      	orrs	r2, r1
 8000646:	61da      	str	r2, [r3, #28]
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_MspInit+0x44>)
 800064a:	69da      	ldr	r2, [r3, #28]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	055b      	lsls	r3, r3, #21
 8000650:	4013      	ands	r3, r2
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b002      	add	sp, #8
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b08b      	sub	sp, #44	; 0x2c
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	2414      	movs	r4, #20
 800066e:	193b      	adds	r3, r7, r4
 8000670:	0018      	movs	r0, r3
 8000672:	2314      	movs	r3, #20
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f003 f868 	bl	800374c <memset>
  if(hcan->Instance==CAN)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a33      	ldr	r2, [pc, #204]	; (8000750 <HAL_CAN_MspInit+0xec>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d15f      	bne.n	8000746 <HAL_CAN_MspInit+0xe2>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000686:	4b33      	ldr	r3, [pc, #204]	; (8000754 <HAL_CAN_MspInit+0xf0>)
 8000688:	69da      	ldr	r2, [r3, #28]
 800068a:	4b32      	ldr	r3, [pc, #200]	; (8000754 <HAL_CAN_MspInit+0xf0>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	0489      	lsls	r1, r1, #18
 8000690:	430a      	orrs	r2, r1
 8000692:	61da      	str	r2, [r3, #28]
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <HAL_CAN_MspInit+0xf0>)
 8000696:	69da      	ldr	r2, [r3, #28]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	049b      	lsls	r3, r3, #18
 800069c:	4013      	ands	r3, r2
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <HAL_CAN_MspInit+0xf0>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <HAL_CAN_MspInit+0xf0>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0289      	lsls	r1, r1, #10
 80006ac:	430a      	orrs	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <HAL_CAN_MspInit+0xf0>)
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	029b      	lsls	r3, r3, #10
 80006b8:	4013      	ands	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b25      	ldr	r3, [pc, #148]	; (8000754 <HAL_CAN_MspInit+0xf0>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <HAL_CAN_MspInit+0xf0>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	02c9      	lsls	r1, r1, #11
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <HAL_CAN_MspInit+0xf0>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	02db      	lsls	r3, r3, #11
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2202      	movs	r2, #2
 80006e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2203      	movs	r2, #3
 80006f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2204      	movs	r2, #4
 80006f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	193a      	adds	r2, r7, r4
 80006fc:	2390      	movs	r3, #144	; 0x90
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	0011      	movs	r1, r2
 8000702:	0018      	movs	r0, r3
 8000704:	f001 f98e 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000708:	0021      	movs	r1, r4
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	0092      	lsls	r2, r2, #2
 8000710:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2202      	movs	r2, #2
 8000716:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2203      	movs	r2, #3
 8000722:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2204      	movs	r2, #4
 8000728:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	187b      	adds	r3, r7, r1
 800072c:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <HAL_CAN_MspInit+0xf4>)
 800072e:	0019      	movs	r1, r3
 8000730:	0010      	movs	r0, r2
 8000732:	f001 f977 	bl	8001a24 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	201e      	movs	r0, #30
 800073c:	f000 ffa8 	bl	8001690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000740:	201e      	movs	r0, #30
 8000742:	f000 ffba 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b00b      	add	sp, #44	; 0x2c
 800074c:	bd90      	pop	{r4, r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	40006400 	.word	0x40006400
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400

0800075c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800075c:	b590      	push	{r4, r7, lr}
 800075e:	b08b      	sub	sp, #44	; 0x2c
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	2414      	movs	r4, #20
 8000766:	193b      	adds	r3, r7, r4
 8000768:	0018      	movs	r0, r3
 800076a:	2314      	movs	r3, #20
 800076c:	001a      	movs	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	f002 ffec 	bl	800374c <memset>
  if(huart->Instance==USART2)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a2f      	ldr	r2, [pc, #188]	; (8000838 <HAL_UART_MspInit+0xdc>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d158      	bne.n	8000830 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <HAL_UART_MspInit+0xe0>)
 8000780:	69da      	ldr	r2, [r3, #28]
 8000782:	4b2e      	ldr	r3, [pc, #184]	; (800083c <HAL_UART_MspInit+0xe0>)
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0289      	lsls	r1, r1, #10
 8000788:	430a      	orrs	r2, r1
 800078a:	61da      	str	r2, [r3, #28]
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <HAL_UART_MspInit+0xe0>)
 800078e:	69da      	ldr	r2, [r3, #28]
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	029b      	lsls	r3, r3, #10
 8000794:	4013      	ands	r3, r2
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <HAL_UART_MspInit+0xe0>)
 800079c:	695a      	ldr	r2, [r3, #20]
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <HAL_UART_MspInit+0xe0>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	0289      	lsls	r1, r1, #10
 80007a4:	430a      	orrs	r2, r1
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <HAL_UART_MspInit+0xe0>)
 80007aa:	695a      	ldr	r2, [r3, #20]
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	029b      	lsls	r3, r3, #10
 80007b0:	4013      	ands	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007b6:	0021      	movs	r1, r4
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	220c      	movs	r2, #12
 80007bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2202      	movs	r2, #2
 80007c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2203      	movs	r2, #3
 80007ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2201      	movs	r2, #1
 80007d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	187a      	adds	r2, r7, r1
 80007d8:	2390      	movs	r3, #144	; 0x90
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	0011      	movs	r1, r2
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 f920 	bl	8001a24 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <HAL_UART_MspInit+0xe4>)
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_UART_MspInit+0xe8>)
 80007e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_UART_MspInit+0xe4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <HAL_UART_MspInit+0xe4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_UART_MspInit+0xe4>)
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_UART_MspInit+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_UART_MspInit+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_UART_MspInit+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <HAL_UART_MspInit+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_UART_MspInit+0xe4>)
 8000816:	0018      	movs	r0, r3
 8000818:	f000 ff6c 	bl	80016f4 <HAL_DMA_Init>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000820:	f7ff fef6 	bl	8000610 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a06      	ldr	r2, [pc, #24]	; (8000840 <HAL_UART_MspInit+0xe4>)
 8000828:	671a      	str	r2, [r3, #112]	; 0x70
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_UART_MspInit+0xe4>)
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b00b      	add	sp, #44	; 0x2c
 8000836:	bd90      	pop	{r4, r7, pc}
 8000838:	40004400 	.word	0x40004400
 800083c:	40021000 	.word	0x40021000
 8000840:	200000d4 	.word	0x200000d4
 8000844:	40020058 	.word	0x40020058

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 f894 	bl	8000998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800087e:	0018      	movs	r0, r3
 8000880:	f000 ffe6 	bl	8001850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	200000d4 	.word	0x200000d4

08000890 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <CEC_CAN_IRQHandler+0x14>)
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fc3a 	bl	8001110 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	20000028 	.word	0x20000028

080008a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490e      	ldr	r1, [pc, #56]	; (80008f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0b      	ldr	r2, [pc, #44]	; (80008fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0b      	ldr	r4, [pc, #44]	; (8000900 <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008de:	f7ff ffe3 	bl	80008a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008e2:	f002 ff0f 	bl	8003704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e6:	f7ff fc9b 	bl	8000220 <main>

080008ea <LoopForever>:

LoopForever:
    b LoopForever
 80008ea:	e7fe      	b.n	80008ea <LoopForever>
  ldr   r0, =_estack
 80008ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008f8:	080037c8 	.word	0x080037c8
  ldr r2, =_sbss
 80008fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000900:	2000015c 	.word	0x2000015c

08000904 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC1_COMP_IRQHandler>
	...

08000908 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <HAL_Init+0x24>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_Init+0x24>)
 8000912:	2110      	movs	r1, #16
 8000914:	430a      	orrs	r2, r1
 8000916:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f809 	bl	8000930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091e:	f7ff fe7d 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000922:	2300      	movs	r3, #0
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40022000 	.word	0x40022000

08000930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_InitTick+0x5c>)
 800093a:	681c      	ldr	r4, [r3, #0]
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_InitTick+0x60>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	0019      	movs	r1, r3
 8000942:	23fa      	movs	r3, #250	; 0xfa
 8000944:	0098      	lsls	r0, r3, #2
 8000946:	f7ff fbdf 	bl	8000108 <__udivsi3>
 800094a:	0003      	movs	r3, r0
 800094c:	0019      	movs	r1, r3
 800094e:	0020      	movs	r0, r4
 8000950:	f7ff fbda 	bl	8000108 <__udivsi3>
 8000954:	0003      	movs	r3, r0
 8000956:	0018      	movs	r0, r3
 8000958:	f000 febf 	bl	80016da <HAL_SYSTICK_Config>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d001      	beq.n	8000964 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	e00f      	b.n	8000984 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d80b      	bhi.n	8000982 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	2301      	movs	r3, #1
 800096e:	425b      	negs	r3, r3
 8000970:	2200      	movs	r2, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fe8c 	bl	8001690 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_InitTick+0x64>)
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	e000      	b.n	8000984 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
}
 8000984:	0018      	movs	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	b003      	add	sp, #12
 800098a:	bd90      	pop	{r4, r7, pc}
 800098c:	20000000 	.word	0x20000000
 8000990:	20000008 	.word	0x20000008
 8000994:	20000004 	.word	0x20000004

08000998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_IncTick+0x1c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	001a      	movs	r2, r3
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x20>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	18d2      	adds	r2, r2, r3
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <HAL_IncTick+0x20>)
 80009aa:	601a      	str	r2, [r3, #0]
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20000158 	.word	0x20000158

080009bc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b02      	ldr	r3, [pc, #8]	; (80009cc <HAL_GetTick+0x10>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	20000158 	.word	0x20000158

080009d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d8:	f7ff fff0 	bl	80009bc <HAL_GetTick>
 80009dc:	0003      	movs	r3, r0
 80009de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3301      	adds	r3, #1
 80009e8:	d005      	beq.n	80009f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_Delay+0x44>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	001a      	movs	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	189b      	adds	r3, r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	f7ff ffe0 	bl	80009bc <HAL_GetTick>
 80009fc:	0002      	movs	r2, r0
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d8f7      	bhi.n	80009f8 <HAL_Delay+0x28>
  {
  }
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b004      	add	sp, #16
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	20000008 	.word	0x20000008

08000a18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d101      	bne.n	8000a2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e0f0      	b.n	8000c0c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	5c9b      	ldrb	r3, [r3, r2]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d103      	bne.n	8000a3e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff fe13 	bl	8000664 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2101      	movs	r1, #1
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a4e:	f7ff ffb5 	bl	80009bc <HAL_GetTick>
 8000a52:	0003      	movs	r3, r0
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a56:	e013      	b.n	8000a80 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a58:	f7ff ffb0 	bl	80009bc <HAL_GetTick>
 8000a5c:	0002      	movs	r2, r0
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	2b0a      	cmp	r3, #10
 8000a64:	d90c      	bls.n	8000a80 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	0292      	lsls	r2, r2, #10
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2220      	movs	r2, #32
 8000a78:	2105      	movs	r1, #5
 8000a7a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e0c5      	b.n	8000c0c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	4013      	ands	r3, r2
 8000a8a:	d0e5      	beq.n	8000a58 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2102      	movs	r1, #2
 8000a98:	438a      	bics	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a9c:	f7ff ff8e 	bl	80009bc <HAL_GetTick>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aa4:	e013      	b.n	8000ace <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000aa6:	f7ff ff89 	bl	80009bc <HAL_GetTick>
 8000aaa:	0002      	movs	r2, r0
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	2b0a      	cmp	r3, #10
 8000ab2:	d90c      	bls.n	8000ace <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab8:	2280      	movs	r2, #128	; 0x80
 8000aba:	0292      	lsls	r2, r2, #10
 8000abc:	431a      	orrs	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2220      	movs	r2, #32
 8000ac6:	2105      	movs	r1, #5
 8000ac8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e09e      	b.n	8000c0c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	d1e5      	bne.n	8000aa6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7e1b      	ldrb	r3, [r3, #24]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d108      	bne.n	8000af4 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	430a      	orrs	r2, r1
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	e007      	b.n	8000b04 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	438a      	bics	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7e5b      	ldrb	r3, [r3, #25]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d108      	bne.n	8000b1e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2140      	movs	r1, #64	; 0x40
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e007      	b.n	8000b2e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	438a      	bics	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	7e9b      	ldrb	r3, [r3, #26]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d108      	bne.n	8000b48 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2120      	movs	r1, #32
 8000b42:	430a      	orrs	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	e007      	b.n	8000b58 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2120      	movs	r1, #32
 8000b54:	438a      	bics	r2, r1
 8000b56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7edb      	ldrb	r3, [r3, #27]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d108      	bne.n	8000b72 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	438a      	bics	r2, r1
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	e007      	b.n	8000b82 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	7f1b      	ldrb	r3, [r3, #28]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d108      	bne.n	8000b9c <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2108      	movs	r1, #8
 8000b96:	430a      	orrs	r2, r1
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	e007      	b.n	8000bac <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	438a      	bics	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	7f5b      	ldrb	r3, [r3, #29]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d108      	bne.n	8000bc6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	e007      	b.n	8000bd6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	438a      	bics	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	431a      	orrs	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	431a      	orrs	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	431a      	orrs	r2, r3
 8000bec:	0011      	movs	r1, r2
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2220      	movs	r2, #32
 8000c06:	2101      	movs	r1, #1
 8000c08:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b004      	add	sp, #16
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c24:	2013      	movs	r0, #19
 8000c26:	183b      	adds	r3, r7, r0
 8000c28:	687a      	ldr	r2, [r7, #4]
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	5c52      	ldrb	r2, [r2, r1]
 8000c2e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c30:	0002      	movs	r2, r0
 8000c32:	18bb      	adds	r3, r7, r2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d004      	beq.n	8000c44 <HAL_CAN_ConfigFilter+0x30>
 8000c3a:	18bb      	adds	r3, r7, r2
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d000      	beq.n	8000c44 <HAL_CAN_ConfigFilter+0x30>
 8000c42:	e0cd      	b.n	8000de0 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	58d3      	ldr	r3, [r2, r3]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	0011      	movs	r1, r2
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	221f      	movs	r2, #31
 8000c60:	4013      	ands	r3, r2
 8000c62:	2201      	movs	r2, #1
 8000c64:	409a      	lsls	r2, r3
 8000c66:	0013      	movs	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	2387      	movs	r3, #135	; 0x87
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	58d3      	ldr	r3, [r2, r3]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	43d2      	mvns	r2, r2
 8000c76:	401a      	ands	r2, r3
 8000c78:	0011      	movs	r1, r2
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	2387      	movs	r3, #135	; 0x87
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d129      	bne.n	8000cde <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	2383      	movs	r3, #131	; 0x83
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	58d3      	ldr	r3, [r2, r3]
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	43d2      	mvns	r2, r2
 8000c96:	401a      	ands	r2, r3
 8000c98:	0011      	movs	r1, r2
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	2383      	movs	r3, #131	; 0x83
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	041b      	lsls	r3, r3, #16
 8000cae:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cb4:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3248      	adds	r2, #72	; 0x48
 8000cba:	00d2      	lsls	r2, r2, #3
 8000cbc:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	041b      	lsls	r3, r3, #16
 8000cca:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cd0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cd2:	6979      	ldr	r1, [r7, #20]
 8000cd4:	3348      	adds	r3, #72	; 0x48
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	18cb      	adds	r3, r1, r3
 8000cda:	3304      	adds	r3, #4
 8000cdc:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d128      	bne.n	8000d38 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	2383      	movs	r3, #131	; 0x83
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	58d2      	ldr	r2, [r2, r3]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	2383      	movs	r3, #131	; 0x83
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	041b      	lsls	r3, r3, #16
 8000d08:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d0e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3248      	adds	r2, #72	; 0x48
 8000d14:	00d2      	lsls	r2, r2, #3
 8000d16:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	041b      	lsls	r3, r3, #16
 8000d24:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d2a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d2c:	6979      	ldr	r1, [r7, #20]
 8000d2e:	3348      	adds	r3, #72	; 0x48
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	18cb      	adds	r3, r1, r3
 8000d34:	3304      	adds	r3, #4
 8000d36:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10c      	bne.n	8000d5a <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	2381      	movs	r3, #129	; 0x81
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	58d3      	ldr	r3, [r2, r3]
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	43d2      	mvns	r2, r2
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	0011      	movs	r1, r2
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	2381      	movs	r3, #129	; 0x81
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	50d1      	str	r1, [r2, r3]
 8000d58:	e00a      	b.n	8000d70 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	2381      	movs	r3, #129	; 0x81
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	58d2      	ldr	r2, [r2, r3]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	431a      	orrs	r2, r3
 8000d66:	0011      	movs	r1, r2
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	2381      	movs	r3, #129	; 0x81
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10c      	bne.n	8000d92 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	2385      	movs	r3, #133	; 0x85
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	58d3      	ldr	r3, [r2, r3]
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	43d2      	mvns	r2, r2
 8000d84:	401a      	ands	r2, r3
 8000d86:	0011      	movs	r1, r2
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	2385      	movs	r3, #133	; 0x85
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	50d1      	str	r1, [r2, r3]
 8000d90:	e00a      	b.n	8000da8 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	2385      	movs	r3, #133	; 0x85
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	58d2      	ldr	r2, [r2, r3]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	0011      	movs	r1, r2
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	2385      	movs	r3, #133	; 0x85
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d10a      	bne.n	8000dc6 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	2387      	movs	r3, #135	; 0x87
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	58d2      	ldr	r2, [r2, r3]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	2387      	movs	r3, #135	; 0x87
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	58d3      	ldr	r3, [r2, r3]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4393      	bics	r3, r2
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e007      	b.n	8000df0 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	02d2      	lsls	r2, r2, #11
 8000de8:	431a      	orrs	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
  }
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b006      	add	sp, #24
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2220      	movs	r2, #32
 8000e04:	5c9b      	ldrb	r3, [r3, r2]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d12f      	bne.n	8000e6c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2220      	movs	r2, #32
 8000e10:	2102      	movs	r1, #2
 8000e12:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2101      	movs	r1, #1
 8000e20:	438a      	bics	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e24:	f7ff fdca 	bl	80009bc <HAL_GetTick>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e2c:	e013      	b.n	8000e56 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e2e:	f7ff fdc5 	bl	80009bc <HAL_GetTick>
 8000e32:	0002      	movs	r2, r0
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b0a      	cmp	r3, #10
 8000e3a:	d90c      	bls.n	8000e56 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	0292      	lsls	r2, r2, #10
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	2105      	movs	r1, #5
 8000e50:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e012      	b.n	8000e7c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d1e5      	bne.n	8000e2e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	e007      	b.n	8000e7c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	0312      	lsls	r2, r2, #12
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
  }
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b004      	add	sp, #16
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e92:	2017      	movs	r0, #23
 8000e94:	183b      	adds	r3, r7, r0
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	2120      	movs	r1, #32
 8000e9a:	5c52      	ldrb	r2, [r2, r1]
 8000e9c:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	18bb      	adds	r3, r7, r2
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d004      	beq.n	8000eb2 <HAL_CAN_GetRxMessage+0x2e>
 8000ea8:	18bb      	adds	r3, r7, r2
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d000      	beq.n	8000eb2 <HAL_CAN_GetRxMessage+0x2e>
 8000eb0:	e0f8      	b.n	80010a4 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10e      	bne.n	8000ed6 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d117      	bne.n	8000ef4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	0392      	lsls	r2, r2, #14
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e0ee      	b.n	80010b4 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	2203      	movs	r2, #3
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d108      	bne.n	8000ef4 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	0392      	lsls	r2, r2, #14
 8000eea:	431a      	orrs	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e0df      	b.n	80010b4 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68ba      	ldr	r2, [r7, #8]
 8000efa:	321b      	adds	r2, #27
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	58d3      	ldr	r3, [r2, r3]
 8000f00:	2204      	movs	r2, #4
 8000f02:	401a      	ands	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10b      	bne.n	8000f28 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	321b      	adds	r2, #27
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	58d3      	ldr	r3, [r2, r3]
 8000f1c:	0d5b      	lsrs	r3, r3, #21
 8000f1e:	055b      	lsls	r3, r3, #21
 8000f20:	0d5a      	lsrs	r2, r3, #21
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e00a      	b.n	8000f3e <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	321b      	adds	r2, #27
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	58d3      	ldr	r3, [r2, r3]
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	321b      	adds	r2, #27
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	58d3      	ldr	r3, [r2, r3]
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	331b      	adds	r3, #27
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	18d3      	adds	r3, r2, r3
 8000f5e:	3304      	adds	r3, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	220f      	movs	r2, #15
 8000f64:	401a      	ands	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	331b      	adds	r3, #27
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	18d3      	adds	r3, r2, r3
 8000f76:	3304      	adds	r3, #4
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	22ff      	movs	r2, #255	; 0xff
 8000f7e:	401a      	ands	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	331b      	adds	r3, #27
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	18d3      	adds	r3, r2, r3
 8000f90:	3304      	adds	r3, #4
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	0c1b      	lsrs	r3, r3, #16
 8000f96:	041b      	lsls	r3, r3, #16
 8000f98:	0c1a      	lsrs	r2, r3, #16
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6819      	ldr	r1, [r3, #0]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	23dc      	movs	r3, #220	; 0xdc
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	188a      	adds	r2, r1, r2
 8000fac:	18d3      	adds	r3, r2, r3
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6819      	ldr	r1, [r3, #0]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	23dc      	movs	r3, #220	; 0xdc
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	188a      	adds	r2, r1, r2
 8000fc4:	18d3      	adds	r3, r2, r3
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	0a1a      	lsrs	r2, r3, #8
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6819      	ldr	r1, [r3, #0]
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	23dc      	movs	r3, #220	; 0xdc
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	188a      	adds	r2, r1, r2
 8000fe0:	18d3      	adds	r3, r2, r3
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	0c1a      	lsrs	r2, r3, #16
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	3302      	adds	r3, #2
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6819      	ldr	r1, [r3, #0]
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	23dc      	movs	r3, #220	; 0xdc
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	188a      	adds	r2, r1, r2
 8000ffc:	18d3      	adds	r3, r2, r3
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0e1a      	lsrs	r2, r3, #24
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	3303      	adds	r3, #3
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	23de      	movs	r3, #222	; 0xde
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	188a      	adds	r2, r1, r2
 8001018:	18d3      	adds	r3, r2, r3
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	3304      	adds	r3, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6819      	ldr	r1, [r3, #0]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	23de      	movs	r3, #222	; 0xde
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	188a      	adds	r2, r1, r2
 8001032:	18d3      	adds	r3, r2, r3
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	0a1a      	lsrs	r2, r3, #8
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	3305      	adds	r3, #5
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6819      	ldr	r1, [r3, #0]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	23de      	movs	r3, #222	; 0xde
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	188a      	adds	r2, r1, r2
 800104e:	18d3      	adds	r3, r2, r3
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	0c1a      	lsrs	r2, r3, #16
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	3306      	adds	r3, #6
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6819      	ldr	r1, [r3, #0]
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	23de      	movs	r3, #222	; 0xde
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	188a      	adds	r2, r1, r2
 800106a:	18d3      	adds	r3, r2, r3
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	0e1a      	lsrs	r2, r3, #24
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3307      	adds	r3, #7
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d108      	bne.n	8001090 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2120      	movs	r1, #32
 800108a:	430a      	orrs	r2, r1
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	e007      	b.n	80010a0 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2120      	movs	r1, #32
 800109c:	430a      	orrs	r2, r1
 800109e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	e007      	b.n	80010b4 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	02d2      	lsls	r2, r2, #11
 80010ac:	431a      	orrs	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
  }
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b006      	add	sp, #24
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010c6:	200f      	movs	r0, #15
 80010c8:	183b      	adds	r3, r7, r0
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	2120      	movs	r1, #32
 80010ce:	5c52      	ldrb	r2, [r2, r1]
 80010d0:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010d2:	0002      	movs	r2, r0
 80010d4:	18bb      	adds	r3, r7, r2
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d003      	beq.n	80010e4 <HAL_CAN_ActivateNotification+0x28>
 80010dc:	18bb      	adds	r3, r7, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d109      	bne.n	80010f8 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6959      	ldr	r1, [r3, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e007      	b.n	8001108 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	02d2      	lsls	r2, r2, #11
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
  }
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b004      	add	sp, #16
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	2201      	movs	r2, #1
 8001150:	4013      	ands	r3, r2
 8001152:	d100      	bne.n	8001156 <HAL_CAN_IRQHandler+0x46>
 8001154:	e084      	b.n	8001260 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2201      	movs	r2, #1
 800115a:	4013      	ands	r3, r2
 800115c:	d024      	beq.n	80011a8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2201      	movs	r2, #1
 8001164:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2202      	movs	r2, #2
 800116a:	4013      	ands	r3, r2
 800116c:	d004      	beq.n	8001178 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	0018      	movs	r0, r3
 8001172:	f000 f981 	bl	8001478 <HAL_CAN_TxMailbox0CompleteCallback>
 8001176:	e017      	b.n	80011a8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	2204      	movs	r2, #4
 800117c:	4013      	ands	r3, r2
 800117e:	d005      	beq.n	800118c <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	4313      	orrs	r3, r2
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	e00d      	b.n	80011a8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2208      	movs	r2, #8
 8001190:	4013      	ands	r3, r2
 8001192:	d005      	beq.n	80011a0 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	2280      	movs	r2, #128	; 0x80
 8001198:	0152      	lsls	r2, r2, #5
 800119a:	4313      	orrs	r3, r2
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
 800119e:	e003      	b.n	80011a8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 f980 	bl	80014a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4013      	ands	r3, r2
 80011b0:	d028      	beq.n	8001204 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	0052      	lsls	r2, r2, #1
 80011ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4013      	ands	r3, r2
 80011c4:	d004      	beq.n	80011d0 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	0018      	movs	r0, r3
 80011ca:	f000 f95d 	bl	8001488 <HAL_CAN_TxMailbox1CompleteCallback>
 80011ce:	e019      	b.n	8001204 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	4013      	ands	r3, r2
 80011d8:	d005      	beq.n	80011e6 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	0192      	lsls	r2, r2, #6
 80011e0:	4313      	orrs	r3, r2
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
 80011e4:	e00e      	b.n	8001204 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	4013      	ands	r3, r2
 80011ee:	d005      	beq.n	80011fc <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	01d2      	lsls	r2, r2, #7
 80011f6:	4313      	orrs	r3, r2
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
 80011fa:	e003      	b.n	8001204 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 f95a 	bl	80014b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	025b      	lsls	r3, r3, #9
 800120a:	4013      	ands	r3, r2
 800120c:	d028      	beq.n	8001260 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	0252      	lsls	r2, r2, #9
 8001216:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	029b      	lsls	r3, r3, #10
 800121e:	4013      	ands	r3, r2
 8001220:	d004      	beq.n	800122c <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	0018      	movs	r0, r3
 8001226:	f000 f937 	bl	8001498 <HAL_CAN_TxMailbox2CompleteCallback>
 800122a:	e019      	b.n	8001260 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	02db      	lsls	r3, r3, #11
 8001232:	4013      	ands	r3, r2
 8001234:	d005      	beq.n	8001242 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	0212      	lsls	r2, r2, #8
 800123c:	4313      	orrs	r3, r2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
 8001240:	e00e      	b.n	8001260 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	031b      	lsls	r3, r3, #12
 8001248:	4013      	ands	r3, r2
 800124a:	d005      	beq.n	8001258 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	0252      	lsls	r2, r2, #9
 8001252:	4313      	orrs	r3, r2
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	e003      	b.n	8001260 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	0018      	movs	r0, r3
 800125c:	f000 f934 	bl	80014c8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	2208      	movs	r2, #8
 8001264:	4013      	ands	r3, r2
 8001266:	d00c      	beq.n	8001282 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	2210      	movs	r2, #16
 800126c:	4013      	ands	r3, r2
 800126e:	d008      	beq.n	8001282 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	4313      	orrs	r3, r2
 8001278:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2210      	movs	r2, #16
 8001280:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	2204      	movs	r2, #4
 8001286:	4013      	ands	r3, r2
 8001288:	d00b      	beq.n	80012a2 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2208      	movs	r2, #8
 800128e:	4013      	ands	r3, r2
 8001290:	d007      	beq.n	80012a2 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2208      	movs	r2, #8
 8001298:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0018      	movs	r0, r3
 800129e:	f000 f91b 	bl	80014d8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	2202      	movs	r2, #2
 80012a6:	4013      	ands	r3, r2
 80012a8:	d009      	beq.n	80012be <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2203      	movs	r2, #3
 80012b2:	4013      	ands	r3, r2
 80012b4:	d003      	beq.n	80012be <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff f931 	bl	8000520 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	2240      	movs	r2, #64	; 0x40
 80012c2:	4013      	ands	r3, r2
 80012c4:	d00c      	beq.n	80012e0 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2210      	movs	r2, #16
 80012ca:	4013      	ands	r3, r2
 80012cc:	d008      	beq.n	80012e0 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	00d2      	lsls	r2, r2, #3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2210      	movs	r2, #16
 80012de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	2220      	movs	r2, #32
 80012e4:	4013      	ands	r3, r2
 80012e6:	d00b      	beq.n	8001300 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	2208      	movs	r2, #8
 80012ec:	4013      	ands	r3, r2
 80012ee:	d007      	beq.n	8001300 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2208      	movs	r2, #8
 80012f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 f8fc 	bl	80014f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	2210      	movs	r2, #16
 8001304:	4013      	ands	r3, r2
 8001306:	d009      	beq.n	800131c <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	2203      	movs	r2, #3
 8001310:	4013      	ands	r3, r2
 8001312:	d003      	beq.n	800131c <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	0018      	movs	r0, r3
 8001318:	f000 f8e6 	bl	80014e8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800131c:	6a3a      	ldr	r2, [r7, #32]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	029b      	lsls	r3, r3, #10
 8001322:	4013      	ands	r3, r2
 8001324:	d00b      	beq.n	800133e <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	2210      	movs	r2, #16
 800132a:	4013      	ands	r3, r2
 800132c:	d007      	beq.n	800133e <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2210      	movs	r2, #16
 8001334:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	0018      	movs	r0, r3
 800133a:	f000 f8e5 	bl	8001508 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800133e:	6a3a      	ldr	r2, [r7, #32]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	025b      	lsls	r3, r3, #9
 8001344:	4013      	ands	r3, r2
 8001346:	d00b      	beq.n	8001360 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2208      	movs	r2, #8
 800134c:	4013      	ands	r3, r2
 800134e:	d007      	beq.n	8001360 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2208      	movs	r2, #8
 8001356:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	0018      	movs	r0, r3
 800135c:	f000 f8dc 	bl	8001518 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001360:	6a3a      	ldr	r2, [r7, #32]
 8001362:	2380      	movs	r3, #128	; 0x80
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	4013      	ands	r3, r2
 8001368:	d100      	bne.n	800136c <HAL_CAN_IRQHandler+0x25c>
 800136a:	e074      	b.n	8001456 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2204      	movs	r2, #4
 8001370:	4013      	ands	r3, r2
 8001372:	d100      	bne.n	8001376 <HAL_CAN_IRQHandler+0x266>
 8001374:	e06b      	b.n	800144e <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001376:	6a3a      	ldr	r2, [r7, #32]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4013      	ands	r3, r2
 800137e:	d007      	beq.n	8001390 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2201      	movs	r2, #1
 8001384:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001386:	d003      	beq.n	8001390 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	2201      	movs	r2, #1
 800138c:	4313      	orrs	r3, r2
 800138e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001390:	6a3a      	ldr	r2, [r7, #32]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4013      	ands	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2202      	movs	r2, #2
 800139e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013a0:	d003      	beq.n	80013aa <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	2202      	movs	r2, #2
 80013a6:	4313      	orrs	r3, r2
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013aa:	6a3a      	ldr	r2, [r7, #32]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4013      	ands	r3, r2
 80013b2:	d007      	beq.n	80013c4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2204      	movs	r2, #4
 80013b8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013ba:	d003      	beq.n	80013c4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	2204      	movs	r2, #4
 80013c0:	4313      	orrs	r3, r2
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013c4:	6a3a      	ldr	r2, [r7, #32]
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	4013      	ands	r3, r2
 80013cc:	d03f      	beq.n	800144e <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2270      	movs	r2, #112	; 0x70
 80013d2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013d4:	d03b      	beq.n	800144e <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2270      	movs	r2, #112	; 0x70
 80013da:	4013      	ands	r3, r2
 80013dc:	2b60      	cmp	r3, #96	; 0x60
 80013de:	d027      	beq.n	8001430 <HAL_CAN_IRQHandler+0x320>
 80013e0:	d82c      	bhi.n	800143c <HAL_CAN_IRQHandler+0x32c>
 80013e2:	2b50      	cmp	r3, #80	; 0x50
 80013e4:	d01f      	beq.n	8001426 <HAL_CAN_IRQHandler+0x316>
 80013e6:	d829      	bhi.n	800143c <HAL_CAN_IRQHandler+0x32c>
 80013e8:	2b40      	cmp	r3, #64	; 0x40
 80013ea:	d017      	beq.n	800141c <HAL_CAN_IRQHandler+0x30c>
 80013ec:	d826      	bhi.n	800143c <HAL_CAN_IRQHandler+0x32c>
 80013ee:	2b30      	cmp	r3, #48	; 0x30
 80013f0:	d00f      	beq.n	8001412 <HAL_CAN_IRQHandler+0x302>
 80013f2:	d823      	bhi.n	800143c <HAL_CAN_IRQHandler+0x32c>
 80013f4:	2b10      	cmp	r3, #16
 80013f6:	d002      	beq.n	80013fe <HAL_CAN_IRQHandler+0x2ee>
 80013f8:	2b20      	cmp	r3, #32
 80013fa:	d005      	beq.n	8001408 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013fc:	e01e      	b.n	800143c <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	2208      	movs	r2, #8
 8001402:	4313      	orrs	r3, r2
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001406:	e01a      	b.n	800143e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	2210      	movs	r2, #16
 800140c:	4313      	orrs	r3, r2
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001410:	e015      	b.n	800143e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	2220      	movs	r2, #32
 8001416:	4313      	orrs	r3, r2
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800141a:	e010      	b.n	800143e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	2240      	movs	r2, #64	; 0x40
 8001420:	4313      	orrs	r3, r2
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001424:	e00b      	b.n	800143e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	4313      	orrs	r3, r2
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800142e:	e006      	b.n	800143e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	0052      	lsls	r2, r2, #1
 8001436:	4313      	orrs	r3, r2
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800143a:	e000      	b.n	800143e <HAL_CAN_IRQHandler+0x32e>
            break;
 800143c:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	699a      	ldr	r2, [r3, #24]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2170      	movs	r1, #112	; 0x70
 800144a:	438a      	bics	r2, r1
 800144c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2204      	movs	r2, #4
 8001454:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	2b00      	cmp	r3, #0
 800145a:	d009      	beq.n	8001470 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	0018      	movs	r0, r3
 800146c:	f000 f85c 	bl	8001528 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b00a      	add	sp, #40	; 0x28
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b002      	add	sp, #8
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b002      	add	sp, #8
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b002      	add	sp, #8
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014e0:	46c0      	nop			; (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b002      	add	sp, #8
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b002      	add	sp, #8
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	b002      	add	sp, #8
 8001536:	bd80      	pop	{r7, pc}

08001538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	0002      	movs	r2, r0
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001544:	1dfb      	adds	r3, r7, #7
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b7f      	cmp	r3, #127	; 0x7f
 800154a:	d809      	bhi.n	8001560 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800154c:	1dfb      	adds	r3, r7, #7
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	001a      	movs	r2, r3
 8001552:	231f      	movs	r3, #31
 8001554:	401a      	ands	r2, r3
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_EnableIRQ+0x30>)
 8001558:	2101      	movs	r1, #1
 800155a:	4091      	lsls	r1, r2
 800155c:	000a      	movs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
  }
}
 8001560:	46c0      	nop			; (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	b002      	add	sp, #8
 8001566:	bd80      	pop	{r7, pc}
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	0002      	movs	r2, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b7f      	cmp	r3, #127	; 0x7f
 8001580:	d828      	bhi.n	80015d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001582:	4a2f      	ldr	r2, [pc, #188]	; (8001640 <__NVIC_SetPriority+0xd4>)
 8001584:	1dfb      	adds	r3, r7, #7
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b25b      	sxtb	r3, r3
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	33c0      	adds	r3, #192	; 0xc0
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	589b      	ldr	r3, [r3, r2]
 8001592:	1dfa      	adds	r2, r7, #7
 8001594:	7812      	ldrb	r2, [r2, #0]
 8001596:	0011      	movs	r1, r2
 8001598:	2203      	movs	r2, #3
 800159a:	400a      	ands	r2, r1
 800159c:	00d2      	lsls	r2, r2, #3
 800159e:	21ff      	movs	r1, #255	; 0xff
 80015a0:	4091      	lsls	r1, r2
 80015a2:	000a      	movs	r2, r1
 80015a4:	43d2      	mvns	r2, r2
 80015a6:	401a      	ands	r2, r3
 80015a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	019b      	lsls	r3, r3, #6
 80015ae:	22ff      	movs	r2, #255	; 0xff
 80015b0:	401a      	ands	r2, r3
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	0018      	movs	r0, r3
 80015b8:	2303      	movs	r3, #3
 80015ba:	4003      	ands	r3, r0
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c0:	481f      	ldr	r0, [pc, #124]	; (8001640 <__NVIC_SetPriority+0xd4>)
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	430a      	orrs	r2, r1
 80015cc:	33c0      	adds	r3, #192	; 0xc0
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015d2:	e031      	b.n	8001638 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d4:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <__NVIC_SetPriority+0xd8>)
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	0019      	movs	r1, r3
 80015dc:	230f      	movs	r3, #15
 80015de:	400b      	ands	r3, r1
 80015e0:	3b08      	subs	r3, #8
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3306      	adds	r3, #6
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	18d3      	adds	r3, r2, r3
 80015ea:	3304      	adds	r3, #4
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	1dfa      	adds	r2, r7, #7
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	0011      	movs	r1, r2
 80015f4:	2203      	movs	r2, #3
 80015f6:	400a      	ands	r2, r1
 80015f8:	00d2      	lsls	r2, r2, #3
 80015fa:	21ff      	movs	r1, #255	; 0xff
 80015fc:	4091      	lsls	r1, r2
 80015fe:	000a      	movs	r2, r1
 8001600:	43d2      	mvns	r2, r2
 8001602:	401a      	ands	r2, r3
 8001604:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	019b      	lsls	r3, r3, #6
 800160a:	22ff      	movs	r2, #255	; 0xff
 800160c:	401a      	ands	r2, r3
 800160e:	1dfb      	adds	r3, r7, #7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	0018      	movs	r0, r3
 8001614:	2303      	movs	r3, #3
 8001616:	4003      	ands	r3, r0
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800161c:	4809      	ldr	r0, [pc, #36]	; (8001644 <__NVIC_SetPriority+0xd8>)
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	001c      	movs	r4, r3
 8001624:	230f      	movs	r3, #15
 8001626:	4023      	ands	r3, r4
 8001628:	3b08      	subs	r3, #8
 800162a:	089b      	lsrs	r3, r3, #2
 800162c:	430a      	orrs	r2, r1
 800162e:	3306      	adds	r3, #6
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	18c3      	adds	r3, r0, r3
 8001634:	3304      	adds	r3, #4
 8001636:	601a      	str	r2, [r3, #0]
}
 8001638:	46c0      	nop			; (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	b003      	add	sp, #12
 800163e:	bd90      	pop	{r4, r7, pc}
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	1e5a      	subs	r2, r3, #1
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	045b      	lsls	r3, r3, #17
 8001658:	429a      	cmp	r2, r3
 800165a:	d301      	bcc.n	8001660 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165c:	2301      	movs	r3, #1
 800165e:	e010      	b.n	8001682 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <SysTick_Config+0x44>)
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	3a01      	subs	r2, #1
 8001666:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001668:	2301      	movs	r3, #1
 800166a:	425b      	negs	r3, r3
 800166c:	2103      	movs	r1, #3
 800166e:	0018      	movs	r0, r3
 8001670:	f7ff ff7c 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <SysTick_Config+0x44>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SysTick_Config+0x44>)
 800167c:	2207      	movs	r2, #7
 800167e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001680:	2300      	movs	r3, #0
}
 8001682:	0018      	movs	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	b002      	add	sp, #8
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	e000e010 	.word	0xe000e010

08001690 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	210f      	movs	r1, #15
 800169c:	187b      	adds	r3, r7, r1
 800169e:	1c02      	adds	r2, r0, #0
 80016a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	0011      	movs	r1, r2
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff ff5d 	bl	800156c <__NVIC_SetPriority>
}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b004      	add	sp, #16
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	0002      	movs	r2, r0
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c6:	1dfb      	adds	r3, r7, #7
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff ff33 	bl	8001538 <__NVIC_EnableIRQ>
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff ffaf 	bl	8001648 <SysTick_Config>
 80016ea:	0003      	movs	r3, r0
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e036      	b.n	8001778 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2221      	movs	r2, #33	; 0x21
 800170e:	2102      	movs	r1, #2
 8001710:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4a18      	ldr	r2, [pc, #96]	; (8001780 <HAL_DMA_Init+0x8c>)
 800171e:	4013      	ands	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800172a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001736:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001742:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	0018      	movs	r0, r3
 800175c:	f000 f946 	bl	80019ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2221      	movs	r2, #33	; 0x21
 800176a:	2101      	movs	r1, #1
 800176c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2220      	movs	r2, #32
 8001772:	2100      	movs	r1, #0
 8001774:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}  
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b004      	add	sp, #16
 800177e:	bd80      	pop	{r7, pc}
 8001780:	ffffc00f 	.word	0xffffc00f

08001784 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001792:	2317      	movs	r3, #23
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2220      	movs	r2, #32
 800179e:	5c9b      	ldrb	r3, [r3, r2]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_DMA_Start_IT+0x24>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e04f      	b.n	8001848 <HAL_DMA_Start_IT+0xc4>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2220      	movs	r2, #32
 80017ac:	2101      	movs	r1, #1
 80017ae:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2221      	movs	r2, #33	; 0x21
 80017b4:	5c9b      	ldrb	r3, [r3, r2]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d13a      	bne.n	8001832 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2221      	movs	r2, #33	; 0x21
 80017c0:	2102      	movs	r1, #2
 80017c2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	438a      	bics	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	68b9      	ldr	r1, [r7, #8]
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 f8d7 	bl	8001994 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d008      	beq.n	8001800 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	210e      	movs	r1, #14
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	e00f      	b.n	8001820 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	210a      	movs	r1, #10
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2104      	movs	r1, #4
 800181c:	438a      	bics	r2, r1
 800181e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2101      	movs	r1, #1
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	e007      	b.n	8001842 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2220      	movs	r2, #32
 8001836:	2100      	movs	r1, #0
 8001838:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800183a:	2317      	movs	r3, #23
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	2202      	movs	r2, #2
 8001840:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001842:	2317      	movs	r3, #23
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	781b      	ldrb	r3, [r3, #0]
} 
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b006      	add	sp, #24
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	2204      	movs	r2, #4
 800186e:	409a      	lsls	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4013      	ands	r3, r2
 8001876:	d024      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x72>
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2204      	movs	r2, #4
 800187c:	4013      	ands	r3, r2
 800187e:	d020      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2220      	movs	r2, #32
 8001888:	4013      	ands	r3, r2
 800188a:	d107      	bne.n	800189c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2104      	movs	r1, #4
 8001898:	438a      	bics	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a4:	2104      	movs	r1, #4
 80018a6:	4091      	lsls	r1, r2
 80018a8:	000a      	movs	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d100      	bne.n	80018b6 <HAL_DMA_IRQHandler+0x66>
 80018b4:	e06a      	b.n	800198c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	0010      	movs	r0, r2
 80018be:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80018c0:	e064      	b.n	800198c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	2202      	movs	r2, #2
 80018c8:	409a      	lsls	r2, r3
 80018ca:	0013      	movs	r3, r2
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4013      	ands	r3, r2
 80018d0:	d02b      	beq.n	800192a <HAL_DMA_IRQHandler+0xda>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2202      	movs	r2, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d027      	beq.n	800192a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2220      	movs	r2, #32
 80018e2:	4013      	ands	r3, r2
 80018e4:	d10b      	bne.n	80018fe <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	210a      	movs	r1, #10
 80018f2:	438a      	bics	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2221      	movs	r2, #33	; 0x21
 80018fa:	2101      	movs	r1, #1
 80018fc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001906:	2102      	movs	r1, #2
 8001908:	4091      	lsls	r1, r2
 800190a:	000a      	movs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2220      	movs	r2, #32
 8001912:	2100      	movs	r1, #0
 8001914:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	2b00      	cmp	r3, #0
 800191c:	d036      	beq.n	800198c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	0010      	movs	r0, r2
 8001926:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001928:	e030      	b.n	800198c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2208      	movs	r2, #8
 8001930:	409a      	lsls	r2, r3
 8001932:	0013      	movs	r3, r2
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	4013      	ands	r3, r2
 8001938:	d028      	beq.n	800198c <HAL_DMA_IRQHandler+0x13c>
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	2208      	movs	r2, #8
 800193e:	4013      	ands	r3, r2
 8001940:	d024      	beq.n	800198c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	210e      	movs	r1, #14
 800194e:	438a      	bics	r2, r1
 8001950:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195a:	2101      	movs	r1, #1
 800195c:	4091      	lsls	r1, r2
 800195e:	000a      	movs	r2, r1
 8001960:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2221      	movs	r2, #33	; 0x21
 800196c:	2101      	movs	r1, #1
 800196e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2220      	movs	r2, #32
 8001974:	2100      	movs	r1, #0
 8001976:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	0010      	movs	r0, r2
 8001988:	4798      	blx	r3
    }
   }
}  
 800198a:	e7ff      	b.n	800198c <HAL_DMA_IRQHandler+0x13c>
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b004      	add	sp, #16
 8001992:	bd80      	pop	{r7, pc}

08001994 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019aa:	2101      	movs	r1, #1
 80019ac:	4091      	lsls	r1, r2
 80019ae:	000a      	movs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d108      	bne.n	80019d4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019d2:	e007      	b.n	80019e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	60da      	str	r2, [r3, #12]
}
 80019e4:	46c0      	nop			; (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}

080019ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <DMA_CalcBaseAndBitshift+0x30>)
 80019fa:	4694      	mov	ip, r2
 80019fc:	4463      	add	r3, ip
 80019fe:	2114      	movs	r1, #20
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7fe fb81 	bl	8000108 <__udivsi3>
 8001a06:	0003      	movs	r3, r0
 8001a08:	009a      	lsls	r2, r3, #2
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <DMA_CalcBaseAndBitshift+0x34>)
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	bffdfff8 	.word	0xbffdfff8
 8001a20:	40020000 	.word	0x40020000

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a32:	e155      	b.n	8001ce0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4091      	lsls	r1, r2
 8001a3e:	000a      	movs	r2, r1
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d100      	bne.n	8001a4c <HAL_GPIO_Init+0x28>
 8001a4a:	e146      	b.n	8001cda <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2203      	movs	r2, #3
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d005      	beq.n	8001a64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d130      	bne.n	8001ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	409a      	lsls	r2, r3
 8001a72:	0013      	movs	r3, r2
 8001a74:	43da      	mvns	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	409a      	lsls	r2, r3
 8001a86:	0013      	movs	r3, r2
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	0013      	movs	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2203      	movs	r2, #3
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d017      	beq.n	8001b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	409a      	lsls	r2, r3
 8001af4:	0013      	movs	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2203      	movs	r2, #3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d123      	bne.n	8001b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	58d3      	ldr	r3, [r2, r3]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2207      	movs	r2, #7
 8001b20:	4013      	ands	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	409a      	lsls	r2, r3
 8001b28:	0013      	movs	r3, r2
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2107      	movs	r1, #7
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	0013      	movs	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	08da      	lsrs	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3208      	adds	r2, #8
 8001b50:	0092      	lsls	r2, r2, #2
 8001b52:	6939      	ldr	r1, [r7, #16]
 8001b54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	409a      	lsls	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	43da      	mvns	r2, r3
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2203      	movs	r2, #3
 8001b74:	401a      	ands	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	0013      	movs	r3, r2
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	23c0      	movs	r3, #192	; 0xc0
 8001b90:	029b      	lsls	r3, r3, #10
 8001b92:	4013      	ands	r3, r2
 8001b94:	d100      	bne.n	8001b98 <HAL_GPIO_Init+0x174>
 8001b96:	e0a0      	b.n	8001cda <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b98:	4b57      	ldr	r3, [pc, #348]	; (8001cf8 <HAL_GPIO_Init+0x2d4>)
 8001b9a:	699a      	ldr	r2, [r3, #24]
 8001b9c:	4b56      	ldr	r3, [pc, #344]	; (8001cf8 <HAL_GPIO_Init+0x2d4>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	619a      	str	r2, [r3, #24]
 8001ba4:	4b54      	ldr	r3, [pc, #336]	; (8001cf8 <HAL_GPIO_Init+0x2d4>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4013      	ands	r3, r2
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bb0:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <HAL_GPIO_Init+0x2d8>)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	589b      	ldr	r3, [r3, r2]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	2390      	movs	r3, #144	; 0x90
 8001bd8:	05db      	lsls	r3, r3, #23
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x1ee>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a47      	ldr	r2, [pc, #284]	; (8001d00 <HAL_GPIO_Init+0x2dc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x1ea>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a46      	ldr	r2, [pc, #280]	; (8001d04 <HAL_GPIO_Init+0x2e0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x1e6>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a45      	ldr	r2, [pc, #276]	; (8001d08 <HAL_GPIO_Init+0x2e4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x1e2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a44      	ldr	r2, [pc, #272]	; (8001d0c <HAL_GPIO_Init+0x2e8>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x1de>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	e008      	b.n	8001c14 <HAL_GPIO_Init+0x1f0>
 8001c02:	2305      	movs	r3, #5
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x1f0>
 8001c06:	2303      	movs	r3, #3
 8001c08:	e004      	b.n	8001c14 <HAL_GPIO_Init+0x1f0>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_Init+0x1f0>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_GPIO_Init+0x1f0>
 8001c12:	2300      	movs	r3, #0
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	2103      	movs	r1, #3
 8001c18:	400a      	ands	r2, r1
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	4093      	lsls	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c24:	4935      	ldr	r1, [pc, #212]	; (8001cfc <HAL_GPIO_Init+0x2d8>)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c32:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	025b      	lsls	r3, r3, #9
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c56:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001c5c:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43da      	mvns	r2, r3
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	029b      	lsls	r3, r3, #10
 8001c74:	4013      	ands	r3, r2
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c80:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	035b      	lsls	r3, r3, #13
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	039b      	lsls	r3, r3, #14
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_GPIO_Init+0x2ec>)
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	40da      	lsrs	r2, r3
 8001ce8:	1e13      	subs	r3, r2, #0
 8001cea:	d000      	beq.n	8001cee <HAL_GPIO_Init+0x2ca>
 8001cec:	e6a2      	b.n	8001a34 <HAL_GPIO_Init+0x10>
  } 
}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b006      	add	sp, #24
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	48000400 	.word	0x48000400
 8001d04:	48000800 	.word	0x48000800
 8001d08:	48000c00 	.word	0x48000c00
 8001d0c:	48001000 	.word	0x48001000
 8001d10:	40010400 	.word	0x40010400

08001d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	0008      	movs	r0, r1
 8001d1e:	0011      	movs	r1, r2
 8001d20:	1cbb      	adds	r3, r7, #2
 8001d22:	1c02      	adds	r2, r0, #0
 8001d24:	801a      	strh	r2, [r3, #0]
 8001d26:	1c7b      	adds	r3, r7, #1
 8001d28:	1c0a      	adds	r2, r1, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d2c:	1c7b      	adds	r3, r7, #1
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d004      	beq.n	8001d3e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d34:	1cbb      	adds	r3, r7, #2
 8001d36:	881a      	ldrh	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d3c:	e003      	b.n	8001d46 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d3e:	1cbb      	adds	r3, r7, #2
 8001d40:	881a      	ldrh	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b002      	add	sp, #8
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d102      	bne.n	8001d64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f000 fb76 	bl	8002450 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d100      	bne.n	8001d70 <HAL_RCC_OscConfig+0x20>
 8001d6e:	e08e      	b.n	8001e8e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d70:	4bc5      	ldr	r3, [pc, #788]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	220c      	movs	r2, #12
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d00e      	beq.n	8001d9a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d7c:	4bc2      	ldr	r3, [pc, #776]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	220c      	movs	r2, #12
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d117      	bne.n	8001db8 <HAL_RCC_OscConfig+0x68>
 8001d88:	4bbf      	ldr	r3, [pc, #764]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	23c0      	movs	r3, #192	; 0xc0
 8001d8e:	025b      	lsls	r3, r3, #9
 8001d90:	401a      	ands	r2, r3
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	025b      	lsls	r3, r3, #9
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d10e      	bne.n	8001db8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9a:	4bbb      	ldr	r3, [pc, #748]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	029b      	lsls	r3, r3, #10
 8001da2:	4013      	ands	r3, r2
 8001da4:	d100      	bne.n	8001da8 <HAL_RCC_OscConfig+0x58>
 8001da6:	e071      	b.n	8001e8c <HAL_RCC_OscConfig+0x13c>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d000      	beq.n	8001db2 <HAL_RCC_OscConfig+0x62>
 8001db0:	e06c      	b.n	8001e8c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f000 fb4c 	bl	8002450 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x80>
 8001dc0:	4bb1      	ldr	r3, [pc, #708]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4bb0      	ldr	r3, [pc, #704]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001dc6:	2180      	movs	r1, #128	; 0x80
 8001dc8:	0249      	lsls	r1, r1, #9
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e02f      	b.n	8001e30 <HAL_RCC_OscConfig+0xe0>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10c      	bne.n	8001df2 <HAL_RCC_OscConfig+0xa2>
 8001dd8:	4bab      	ldr	r3, [pc, #684]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4baa      	ldr	r3, [pc, #680]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001dde:	49ab      	ldr	r1, [pc, #684]	; (800208c <HAL_RCC_OscConfig+0x33c>)
 8001de0:	400a      	ands	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	4ba8      	ldr	r3, [pc, #672]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4ba7      	ldr	r3, [pc, #668]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001dea:	49a9      	ldr	r1, [pc, #676]	; (8002090 <HAL_RCC_OscConfig+0x340>)
 8001dec:	400a      	ands	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e01e      	b.n	8001e30 <HAL_RCC_OscConfig+0xe0>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	d10e      	bne.n	8001e18 <HAL_RCC_OscConfig+0xc8>
 8001dfa:	4ba3      	ldr	r3, [pc, #652]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4ba2      	ldr	r3, [pc, #648]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001e00:	2180      	movs	r1, #128	; 0x80
 8001e02:	02c9      	lsls	r1, r1, #11
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	4b9f      	ldr	r3, [pc, #636]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b9e      	ldr	r3, [pc, #632]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	0249      	lsls	r1, r1, #9
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e00b      	b.n	8001e30 <HAL_RCC_OscConfig+0xe0>
 8001e18:	4b9b      	ldr	r3, [pc, #620]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b9a      	ldr	r3, [pc, #616]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001e1e:	499b      	ldr	r1, [pc, #620]	; (800208c <HAL_RCC_OscConfig+0x33c>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	4b98      	ldr	r3, [pc, #608]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4b97      	ldr	r3, [pc, #604]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001e2a:	4999      	ldr	r1, [pc, #612]	; (8002090 <HAL_RCC_OscConfig+0x340>)
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d014      	beq.n	8001e62 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7fe fdc0 	bl	80009bc <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e42:	f7fe fdbb 	bl	80009bc <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b64      	cmp	r3, #100	; 0x64
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e2fd      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e54:	4b8c      	ldr	r3, [pc, #560]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	029b      	lsls	r3, r3, #10
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0xf2>
 8001e60:	e015      	b.n	8001e8e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e62:	f7fe fdab 	bl	80009bc <HAL_GetTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7fe fda6 	bl	80009bc <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e2e8      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	4b82      	ldr	r3, [pc, #520]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	029b      	lsls	r3, r3, #10
 8001e86:	4013      	ands	r3, r2
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x11c>
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2202      	movs	r2, #2
 8001e94:	4013      	ands	r3, r2
 8001e96:	d100      	bne.n	8001e9a <HAL_RCC_OscConfig+0x14a>
 8001e98:	e06c      	b.n	8001f74 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e9a:	4b7b      	ldr	r3, [pc, #492]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d00e      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ea4:	4b78      	ldr	r3, [pc, #480]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	220c      	movs	r2, #12
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d11f      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x1a0>
 8001eb0:	4b75      	ldr	r3, [pc, #468]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	23c0      	movs	r3, #192	; 0xc0
 8001eb6:	025b      	lsls	r3, r3, #9
 8001eb8:	401a      	ands	r2, r3
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d116      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	4b71      	ldr	r3, [pc, #452]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x188>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e2bb      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b6b      	ldr	r3, [pc, #428]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	22f8      	movs	r2, #248	; 0xf8
 8001ede:	4393      	bics	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	00da      	lsls	r2, r3, #3
 8001ee8:	4b67      	ldr	r3, [pc, #412]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eee:	e041      	b.n	8001f74 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d024      	beq.n	8001f42 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef8:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b62      	ldr	r3, [pc, #392]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe fd5a 	bl	80009bc <HAL_GetTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0e:	f7fe fd55 	bl	80009bc <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e297      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f20:	4b59      	ldr	r3, [pc, #356]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2202      	movs	r2, #2
 8001f26:	4013      	ands	r3, r2
 8001f28:	d0f1      	beq.n	8001f0e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2a:	4b57      	ldr	r3, [pc, #348]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	22f8      	movs	r2, #248	; 0xf8
 8001f30:	4393      	bics	r3, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	00da      	lsls	r2, r3, #3
 8001f3a:	4b53      	ldr	r3, [pc, #332]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e018      	b.n	8001f74 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f42:	4b51      	ldr	r3, [pc, #324]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b50      	ldr	r3, [pc, #320]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001f48:	2101      	movs	r1, #1
 8001f4a:	438a      	bics	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7fe fd35 	bl	80009bc <HAL_GetTick>
 8001f52:	0003      	movs	r3, r0
 8001f54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f58:	f7fe fd30 	bl	80009bc <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e272      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	d1f1      	bne.n	8001f58 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2208      	movs	r2, #8
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d036      	beq.n	8001fec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d019      	beq.n	8001fba <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f86:	4b40      	ldr	r3, [pc, #256]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8a:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7fe fd13 	bl	80009bc <HAL_GetTick>
 8001f96:	0003      	movs	r3, r0
 8001f98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7fe fd0e 	bl	80009bc <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e250      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d0f1      	beq.n	8001f9c <HAL_RCC_OscConfig+0x24c>
 8001fb8:	e018      	b.n	8001fec <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fba:	4b33      	ldr	r3, [pc, #204]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fbe:	4b32      	ldr	r3, [pc, #200]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	438a      	bics	r2, r1
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc6:	f7fe fcf9 	bl	80009bc <HAL_GetTick>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd0:	f7fe fcf4 	bl	80009bc <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e236      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d1f1      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d100      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x2a8>
 8001ff6:	e0b5      	b.n	8002164 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff8:	201f      	movs	r0, #31
 8001ffa:	183b      	adds	r3, r7, r0
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8002002:	69da      	ldr	r2, [r3, #28]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	055b      	lsls	r3, r3, #21
 8002008:	4013      	ands	r3, r2
 800200a:	d110      	bne.n	800202e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200c:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 800200e:	69da      	ldr	r2, [r3, #28]
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 8002012:	2180      	movs	r1, #128	; 0x80
 8002014:	0549      	lsls	r1, r1, #21
 8002016:	430a      	orrs	r2, r1
 8002018:	61da      	str	r2, [r3, #28]
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	055b      	lsls	r3, r3, #21
 8002022:	4013      	ands	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002028:	183b      	adds	r3, r7, r0
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_RCC_OscConfig+0x344>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4013      	ands	r3, r2
 8002038:	d11a      	bne.n	8002070 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_RCC_OscConfig+0x344>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_RCC_OscConfig+0x344>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	0049      	lsls	r1, r1, #1
 8002044:	430a      	orrs	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002048:	f7fe fcb8 	bl	80009bc <HAL_GetTick>
 800204c:	0003      	movs	r3, r0
 800204e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7fe fcb3 	bl	80009bc <HAL_GetTick>
 8002056:	0002      	movs	r2, r0
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b64      	cmp	r3, #100	; 0x64
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e1f5      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_OscConfig+0x344>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4013      	ands	r3, r2
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d10f      	bne.n	8002098 <HAL_RCC_OscConfig+0x348>
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	4b02      	ldr	r3, [pc, #8]	; (8002088 <HAL_RCC_OscConfig+0x338>)
 800207e:	2101      	movs	r1, #1
 8002080:	430a      	orrs	r2, r1
 8002082:	621a      	str	r2, [r3, #32]
 8002084:	e036      	b.n	80020f4 <HAL_RCC_OscConfig+0x3a4>
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	40021000 	.word	0x40021000
 800208c:	fffeffff 	.word	0xfffeffff
 8002090:	fffbffff 	.word	0xfffbffff
 8002094:	40007000 	.word	0x40007000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x36a>
 80020a0:	4bca      	ldr	r3, [pc, #808]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80020a2:	6a1a      	ldr	r2, [r3, #32]
 80020a4:	4bc9      	ldr	r3, [pc, #804]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80020a6:	2101      	movs	r1, #1
 80020a8:	438a      	bics	r2, r1
 80020aa:	621a      	str	r2, [r3, #32]
 80020ac:	4bc7      	ldr	r3, [pc, #796]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80020ae:	6a1a      	ldr	r2, [r3, #32]
 80020b0:	4bc6      	ldr	r3, [pc, #792]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80020b2:	2104      	movs	r1, #4
 80020b4:	438a      	bics	r2, r1
 80020b6:	621a      	str	r2, [r3, #32]
 80020b8:	e01c      	b.n	80020f4 <HAL_RCC_OscConfig+0x3a4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x38c>
 80020c2:	4bc2      	ldr	r3, [pc, #776]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80020c4:	6a1a      	ldr	r2, [r3, #32]
 80020c6:	4bc1      	ldr	r3, [pc, #772]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80020c8:	2104      	movs	r1, #4
 80020ca:	430a      	orrs	r2, r1
 80020cc:	621a      	str	r2, [r3, #32]
 80020ce:	4bbf      	ldr	r3, [pc, #764]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	4bbe      	ldr	r3, [pc, #760]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	621a      	str	r2, [r3, #32]
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0x3a4>
 80020dc:	4bbb      	ldr	r3, [pc, #748]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	4bba      	ldr	r3, [pc, #744]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80020e2:	2101      	movs	r1, #1
 80020e4:	438a      	bics	r2, r1
 80020e6:	621a      	str	r2, [r3, #32]
 80020e8:	4bb8      	ldr	r3, [pc, #736]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80020ea:	6a1a      	ldr	r2, [r3, #32]
 80020ec:	4bb7      	ldr	r3, [pc, #732]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80020ee:	2104      	movs	r1, #4
 80020f0:	438a      	bics	r2, r1
 80020f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d014      	beq.n	8002126 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fc:	f7fe fc5e 	bl	80009bc <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002104:	e009      	b.n	800211a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7fe fc59 	bl	80009bc <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	4aaf      	ldr	r2, [pc, #700]	; (80023d0 <HAL_RCC_OscConfig+0x680>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e19a      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211a:	4bac      	ldr	r3, [pc, #688]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	2202      	movs	r2, #2
 8002120:	4013      	ands	r3, r2
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x3b6>
 8002124:	e013      	b.n	800214e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7fe fc49 	bl	80009bc <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212e:	e009      	b.n	8002144 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe fc44 	bl	80009bc <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	4aa5      	ldr	r2, [pc, #660]	; (80023d0 <HAL_RCC_OscConfig+0x680>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e185      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002144:	4ba1      	ldr	r3, [pc, #644]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	2202      	movs	r2, #2
 800214a:	4013      	ands	r3, r2
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800214e:	231f      	movs	r3, #31
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002158:	4b9c      	ldr	r3, [pc, #624]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800215a:	69da      	ldr	r2, [r3, #28]
 800215c:	4b9b      	ldr	r3, [pc, #620]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800215e:	499d      	ldr	r1, [pc, #628]	; (80023d4 <HAL_RCC_OscConfig+0x684>)
 8002160:	400a      	ands	r2, r1
 8002162:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2210      	movs	r2, #16
 800216a:	4013      	ands	r3, r2
 800216c:	d063      	beq.n	8002236 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d12a      	bne.n	80021cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002176:	4b95      	ldr	r3, [pc, #596]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217a:	4b94      	ldr	r3, [pc, #592]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800217c:	2104      	movs	r1, #4
 800217e:	430a      	orrs	r2, r1
 8002180:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002182:	4b92      	ldr	r3, [pc, #584]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002186:	4b91      	ldr	r3, [pc, #580]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002188:	2101      	movs	r1, #1
 800218a:	430a      	orrs	r2, r1
 800218c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7fe fc15 	bl	80009bc <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002198:	f7fe fc10 	bl	80009bc <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e152      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80021aa:	4b88      	ldr	r3, [pc, #544]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80021ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ae:	2202      	movs	r2, #2
 80021b0:	4013      	ands	r3, r2
 80021b2:	d0f1      	beq.n	8002198 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021b4:	4b85      	ldr	r3, [pc, #532]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80021b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b8:	22f8      	movs	r2, #248	; 0xf8
 80021ba:	4393      	bics	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	00da      	lsls	r2, r3, #3
 80021c4:	4b81      	ldr	r3, [pc, #516]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
 80021ca:	e034      	b.n	8002236 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	3305      	adds	r3, #5
 80021d2:	d111      	bne.n	80021f8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021d4:	4b7d      	ldr	r3, [pc, #500]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80021d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d8:	4b7c      	ldr	r3, [pc, #496]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80021da:	2104      	movs	r1, #4
 80021dc:	438a      	bics	r2, r1
 80021de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021e0:	4b7a      	ldr	r3, [pc, #488]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80021e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e4:	22f8      	movs	r2, #248	; 0xf8
 80021e6:	4393      	bics	r3, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	00da      	lsls	r2, r3, #3
 80021f0:	4b76      	ldr	r3, [pc, #472]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80021f2:	430a      	orrs	r2, r1
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
 80021f6:	e01e      	b.n	8002236 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021f8:	4b74      	ldr	r3, [pc, #464]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80021fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fc:	4b73      	ldr	r3, [pc, #460]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80021fe:	2104      	movs	r1, #4
 8002200:	430a      	orrs	r2, r1
 8002202:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002204:	4b71      	ldr	r3, [pc, #452]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002208:	4b70      	ldr	r3, [pc, #448]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800220a:	2101      	movs	r1, #1
 800220c:	438a      	bics	r2, r1
 800220e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002210:	f7fe fbd4 	bl	80009bc <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800221a:	f7fe fbcf 	bl	80009bc <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e111      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800222c:	4b67      	ldr	r3, [pc, #412]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	2202      	movs	r2, #2
 8002232:	4013      	ands	r3, r2
 8002234:	d1f1      	bne.n	800221a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2220      	movs	r2, #32
 800223c:	4013      	ands	r3, r2
 800223e:	d05c      	beq.n	80022fa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002240:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	220c      	movs	r2, #12
 8002246:	4013      	ands	r3, r2
 8002248:	2b0c      	cmp	r3, #12
 800224a:	d00e      	beq.n	800226a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800224c:	4b5f      	ldr	r3, [pc, #380]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	220c      	movs	r2, #12
 8002252:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002254:	2b08      	cmp	r3, #8
 8002256:	d114      	bne.n	8002282 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002258:	4b5c      	ldr	r3, [pc, #368]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	23c0      	movs	r3, #192	; 0xc0
 800225e:	025b      	lsls	r3, r3, #9
 8002260:	401a      	ands	r2, r3
 8002262:	23c0      	movs	r3, #192	; 0xc0
 8002264:	025b      	lsls	r3, r3, #9
 8002266:	429a      	cmp	r2, r3
 8002268:	d10b      	bne.n	8002282 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800226a:	4b58      	ldr	r3, [pc, #352]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800226c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	025b      	lsls	r3, r3, #9
 8002272:	4013      	ands	r3, r2
 8002274:	d040      	beq.n	80022f8 <HAL_RCC_OscConfig+0x5a8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d03c      	beq.n	80022f8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0e6      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d01b      	beq.n	80022c2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800228a:	4b50      	ldr	r3, [pc, #320]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800228c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800228e:	4b4f      	ldr	r3, [pc, #316]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	0249      	lsls	r1, r1, #9
 8002294:	430a      	orrs	r2, r1
 8002296:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe fb90 	bl	80009bc <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a2:	f7fe fb8b 	bl	80009bc <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0cd      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80022b4:	4b45      	ldr	r3, [pc, #276]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80022b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	025b      	lsls	r3, r3, #9
 80022bc:	4013      	ands	r3, r2
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x552>
 80022c0:	e01b      	b.n	80022fa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80022c2:	4b42      	ldr	r3, [pc, #264]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80022c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80022c8:	4943      	ldr	r1, [pc, #268]	; (80023d8 <HAL_RCC_OscConfig+0x688>)
 80022ca:	400a      	ands	r2, r1
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ce:	f7fe fb75 	bl	80009bc <HAL_GetTick>
 80022d2:	0003      	movs	r3, r0
 80022d4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022d8:	f7fe fb70 	bl	80009bc <HAL_GetTick>
 80022dc:	0002      	movs	r2, r0
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e0b2      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80022ea:	4b38      	ldr	r3, [pc, #224]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80022ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	4013      	ands	r3, r2
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x588>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80022f8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d100      	bne.n	8002304 <HAL_RCC_OscConfig+0x5b4>
 8002302:	e0a4      	b.n	800244e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002304:	4b31      	ldr	r3, [pc, #196]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	220c      	movs	r2, #12
 800230a:	4013      	ands	r3, r2
 800230c:	2b08      	cmp	r3, #8
 800230e:	d100      	bne.n	8002312 <HAL_RCC_OscConfig+0x5c2>
 8002310:	e078      	b.n	8002404 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	2b02      	cmp	r3, #2
 8002318:	d14c      	bne.n	80023b4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231a:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002320:	492e      	ldr	r1, [pc, #184]	; (80023dc <HAL_RCC_OscConfig+0x68c>)
 8002322:	400a      	ands	r2, r1
 8002324:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002326:	f7fe fb49 	bl	80009bc <HAL_GetTick>
 800232a:	0003      	movs	r3, r0
 800232c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fb44 	bl	80009bc <HAL_GetTick>
 8002334:	0002      	movs	r2, r0
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e086      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	049b      	lsls	r3, r3, #18
 800234a:	4013      	ands	r3, r2
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	220f      	movs	r2, #15
 8002354:	4393      	bics	r3, r2
 8002356:	0019      	movs	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800235e:	430a      	orrs	r2, r1
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4a1e      	ldr	r2, [pc, #120]	; (80023e0 <HAL_RCC_OscConfig+0x690>)
 8002368:	4013      	ands	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	431a      	orrs	r2, r3
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	0449      	lsls	r1, r1, #17
 8002386:	430a      	orrs	r2, r1
 8002388:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7fe fb17 	bl	80009bc <HAL_GetTick>
 800238e:	0003      	movs	r3, r0
 8002390:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002394:	f7fe fb12 	bl	80009bc <HAL_GetTick>
 8002398:	0002      	movs	r2, r0
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e054      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	049b      	lsls	r3, r3, #18
 80023ae:	4013      	ands	r3, r2
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x644>
 80023b2:	e04c      	b.n	800244e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_RCC_OscConfig+0x67c>)
 80023ba:	4908      	ldr	r1, [pc, #32]	; (80023dc <HAL_RCC_OscConfig+0x68c>)
 80023bc:	400a      	ands	r2, r1
 80023be:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fafc 	bl	80009bc <HAL_GetTick>
 80023c4:	0003      	movs	r3, r0
 80023c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c8:	e015      	b.n	80023f6 <HAL_RCC_OscConfig+0x6a6>
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	40021000 	.word	0x40021000
 80023d0:	00001388 	.word	0x00001388
 80023d4:	efffffff 	.word	0xefffffff
 80023d8:	fffeffff 	.word	0xfffeffff
 80023dc:	feffffff 	.word	0xfeffffff
 80023e0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e4:	f7fe faea 	bl	80009bc <HAL_GetTick>
 80023e8:	0002      	movs	r2, r0
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e02c      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <HAL_RCC_OscConfig+0x708>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	049b      	lsls	r3, r3, #18
 80023fe:	4013      	ands	r3, r2
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x694>
 8002402:	e024      	b.n	800244e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e01f      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002410:	4b11      	ldr	r3, [pc, #68]	; (8002458 <HAL_RCC_OscConfig+0x708>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HAL_RCC_OscConfig+0x708>)
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	23c0      	movs	r3, #192	; 0xc0
 8002420:	025b      	lsls	r3, r3, #9
 8002422:	401a      	ands	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	429a      	cmp	r2, r3
 800242a:	d10e      	bne.n	800244a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	220f      	movs	r2, #15
 8002430:	401a      	ands	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d107      	bne.n	800244a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	23f0      	movs	r3, #240	; 0xf0
 800243e:	039b      	lsls	r3, r3, #14
 8002440:	401a      	ands	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b008      	add	sp, #32
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000

0800245c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0bf      	b.n	80025f0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002470:	4b61      	ldr	r3, [pc, #388]	; (80025f8 <HAL_RCC_ClockConfig+0x19c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2201      	movs	r2, #1
 8002476:	4013      	ands	r3, r2
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d911      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b5e      	ldr	r3, [pc, #376]	; (80025f8 <HAL_RCC_ClockConfig+0x19c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2201      	movs	r2, #1
 8002484:	4393      	bics	r3, r2
 8002486:	0019      	movs	r1, r3
 8002488:	4b5b      	ldr	r3, [pc, #364]	; (80025f8 <HAL_RCC_ClockConfig+0x19c>)
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002490:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_RCC_ClockConfig+0x19c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0a6      	b.n	80025f0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2202      	movs	r2, #2
 80024a8:	4013      	ands	r3, r2
 80024aa:	d015      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2204      	movs	r2, #4
 80024b2:	4013      	ands	r3, r2
 80024b4:	d006      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024b6:	4b51      	ldr	r3, [pc, #324]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	4b50      	ldr	r3, [pc, #320]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 80024bc:	21e0      	movs	r1, #224	; 0xe0
 80024be:	00c9      	lsls	r1, r1, #3
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c4:	4b4d      	ldr	r3, [pc, #308]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	22f0      	movs	r2, #240	; 0xf0
 80024ca:	4393      	bics	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	4b4a      	ldr	r3, [pc, #296]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2201      	movs	r2, #1
 80024de:	4013      	ands	r3, r2
 80024e0:	d04c      	beq.n	800257c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b44      	ldr	r3, [pc, #272]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	2380      	movs	r3, #128	; 0x80
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	4013      	ands	r3, r2
 80024f4:	d120      	bne.n	8002538 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e07a      	b.n	80025f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	049b      	lsls	r3, r3, #18
 800250a:	4013      	ands	r3, r2
 800250c:	d114      	bne.n	8002538 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e06e      	b.n	80025f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800251a:	4b38      	ldr	r3, [pc, #224]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 800251c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	4013      	ands	r3, r2
 8002524:	d108      	bne.n	8002538 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e062      	b.n	80025f0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	4b34      	ldr	r3, [pc, #208]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e05b      	b.n	80025f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002538:	4b30      	ldr	r3, [pc, #192]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2203      	movs	r2, #3
 800253e:	4393      	bics	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4b2d      	ldr	r3, [pc, #180]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 8002548:	430a      	orrs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800254c:	f7fe fa36 	bl	80009bc <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002554:	e009      	b.n	800256a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002556:	f7fe fa31 	bl	80009bc <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	4a27      	ldr	r2, [pc, #156]	; (8002600 <HAL_RCC_ClockConfig+0x1a4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e042      	b.n	80025f0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b24      	ldr	r3, [pc, #144]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	220c      	movs	r2, #12
 8002570:	401a      	ands	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1ec      	bne.n	8002556 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <HAL_RCC_ClockConfig+0x19c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2201      	movs	r2, #1
 8002582:	4013      	ands	r3, r2
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d211      	bcs.n	80025ae <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_RCC_ClockConfig+0x19c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2201      	movs	r2, #1
 8002590:	4393      	bics	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <HAL_RCC_ClockConfig+0x19c>)
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259c:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_RCC_ClockConfig+0x19c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2201      	movs	r2, #1
 80025a2:	4013      	ands	r3, r2
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e020      	b.n	80025f0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2204      	movs	r2, #4
 80025b4:	4013      	ands	r3, r2
 80025b6:	d009      	beq.n	80025cc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a11      	ldr	r2, [pc, #68]	; (8002604 <HAL_RCC_ClockConfig+0x1a8>)
 80025be:	4013      	ands	r3, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 80025c8:	430a      	orrs	r2, r1
 80025ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025cc:	f000 f820 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80025d0:	0001      	movs	r1, r0
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_RCC_ClockConfig+0x1a0>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	220f      	movs	r2, #15
 80025da:	4013      	ands	r3, r2
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x1ac>)
 80025de:	5cd3      	ldrb	r3, [r2, r3]
 80025e0:	000a      	movs	r2, r1
 80025e2:	40da      	lsrs	r2, r3
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1b0>)
 80025e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80025e8:	2003      	movs	r0, #3
 80025ea:	f7fe f9a1 	bl	8000930 <HAL_InitTick>
  
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b004      	add	sp, #16
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40022000 	.word	0x40022000
 80025fc:	40021000 	.word	0x40021000
 8002600:	00001388 	.word	0x00001388
 8002604:	fffff8ff 	.word	0xfffff8ff
 8002608:	080037a8 	.word	0x080037a8
 800260c:	20000000 	.word	0x20000000

08002610 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b08f      	sub	sp, #60	; 0x3c
 8002614:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002616:	2314      	movs	r3, #20
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	4a38      	ldr	r2, [pc, #224]	; (80026fc <HAL_RCC_GetSysClockFreq+0xec>)
 800261c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800261e:	c313      	stmia	r3!, {r0, r1, r4}
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	4a36      	ldr	r2, [pc, #216]	; (8002700 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002628:	ca13      	ldmia	r2!, {r0, r1, r4}
 800262a:	c313      	stmia	r3!, {r0, r1, r4}
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002634:	2300      	movs	r3, #0
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
 8002638:	2300      	movs	r3, #0
 800263a:	637b      	str	r3, [r7, #52]	; 0x34
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	220c      	movs	r2, #12
 800264e:	4013      	ands	r3, r2
 8002650:	2b0c      	cmp	r3, #12
 8002652:	d047      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0xd4>
 8002654:	d849      	bhi.n	80026ea <HAL_RCC_GetSysClockFreq+0xda>
 8002656:	2b04      	cmp	r3, #4
 8002658:	d002      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x50>
 800265a:	2b08      	cmp	r3, #8
 800265c:	d003      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x56>
 800265e:	e044      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002660:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002662:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002664:	e044      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	0c9b      	lsrs	r3, r3, #18
 800266a:	220f      	movs	r2, #15
 800266c:	4013      	ands	r3, r2
 800266e:	2214      	movs	r2, #20
 8002670:	18ba      	adds	r2, r7, r2
 8002672:	5cd3      	ldrb	r3, [r2, r3]
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002676:	4b23      	ldr	r3, [pc, #140]	; (8002704 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	220f      	movs	r2, #15
 800267c:	4013      	ands	r3, r2
 800267e:	1d3a      	adds	r2, r7, #4
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002686:	23c0      	movs	r3, #192	; 0xc0
 8002688:	025b      	lsls	r3, r3, #9
 800268a:	401a      	ands	r2, r3
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	025b      	lsls	r3, r3, #9
 8002690:	429a      	cmp	r2, r3
 8002692:	d109      	bne.n	80026a8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002696:	481c      	ldr	r0, [pc, #112]	; (8002708 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002698:	f7fd fd36 	bl	8000108 <__udivsi3>
 800269c:	0003      	movs	r3, r0
 800269e:	001a      	movs	r2, r3
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	4353      	muls	r3, r2
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
 80026a6:	e01a      	b.n	80026de <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80026a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026aa:	23c0      	movs	r3, #192	; 0xc0
 80026ac:	025b      	lsls	r3, r3, #9
 80026ae:	401a      	ands	r2, r3
 80026b0:	23c0      	movs	r3, #192	; 0xc0
 80026b2:	025b      	lsls	r3, r3, #9
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d109      	bne.n	80026cc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ba:	4814      	ldr	r0, [pc, #80]	; (800270c <HAL_RCC_GetSysClockFreq+0xfc>)
 80026bc:	f7fd fd24 	bl	8000108 <__udivsi3>
 80026c0:	0003      	movs	r3, r0
 80026c2:	001a      	movs	r2, r3
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	4353      	muls	r3, r2
 80026c8:	637b      	str	r3, [r7, #52]	; 0x34
 80026ca:	e008      	b.n	80026de <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ce:	480e      	ldr	r0, [pc, #56]	; (8002708 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d0:	f7fd fd1a 	bl	8000108 <__udivsi3>
 80026d4:	0003      	movs	r3, r0
 80026d6:	001a      	movs	r2, r3
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	4353      	muls	r3, r2
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80026de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026e2:	e005      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_RCC_GetSysClockFreq+0xfc>)
 80026e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026e8:	e002      	b.n	80026f0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b00f      	add	sp, #60	; 0x3c
 80026f8:	bd90      	pop	{r4, r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	08003788 	.word	0x08003788
 8002700:	08003798 	.word	0x08003798
 8002704:	40021000 	.word	0x40021000
 8002708:	007a1200 	.word	0x007a1200
 800270c:	02dc6c00 	.word	0x02dc6c00

08002710 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002714:	4b02      	ldr	r3, [pc, #8]	; (8002720 <HAL_RCC_GetHCLKFreq+0x10>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	20000000 	.word	0x20000000

08002724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002728:	f7ff fff2 	bl	8002710 <HAL_RCC_GetHCLKFreq>
 800272c:	0001      	movs	r1, r0
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	2207      	movs	r2, #7
 8002736:	4013      	ands	r3, r2
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <HAL_RCC_GetPCLK1Freq+0x28>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	40d9      	lsrs	r1, r3
 800273e:	000b      	movs	r3, r1
}    
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	40021000 	.word	0x40021000
 800274c:	080037b8 	.word	0x080037b8

08002750 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	025b      	lsls	r3, r3, #9
 8002768:	4013      	ands	r3, r2
 800276a:	d100      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800276c:	e08e      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800276e:	2017      	movs	r0, #23
 8002770:	183b      	adds	r3, r7, r0
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b6e      	ldr	r3, [pc, #440]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	055b      	lsls	r3, r3, #21
 800277e:	4013      	ands	r3, r2
 8002780:	d110      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	4b6b      	ldr	r3, [pc, #428]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002788:	2180      	movs	r1, #128	; 0x80
 800278a:	0549      	lsls	r1, r1, #21
 800278c:	430a      	orrs	r2, r1
 800278e:	61da      	str	r2, [r3, #28]
 8002790:	4b67      	ldr	r3, [pc, #412]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	055b      	lsls	r3, r3, #21
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	183b      	adds	r3, r7, r0
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a4:	4b63      	ldr	r3, [pc, #396]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4013      	ands	r3, r2
 80027ae:	d11a      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b0:	4b60      	ldr	r3, [pc, #384]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b5f      	ldr	r3, [pc, #380]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	0049      	lsls	r1, r1, #1
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027be:	f7fe f8fd 	bl	80009bc <HAL_GetTick>
 80027c2:	0003      	movs	r3, r0
 80027c4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	e008      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c8:	f7fe f8f8 	bl	80009bc <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0a6      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027da:	4b56      	ldr	r3, [pc, #344]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027e6:	4b52      	ldr	r3, [pc, #328]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027e8:	6a1a      	ldr	r2, [r3, #32]
 80027ea:	23c0      	movs	r3, #192	; 0xc0
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4013      	ands	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d034      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	23c0      	movs	r3, #192	; 0xc0
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4013      	ands	r3, r2
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	429a      	cmp	r2, r3
 8002806:	d02c      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002808:	4b49      	ldr	r3, [pc, #292]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	4a4a      	ldr	r2, [pc, #296]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800280e:	4013      	ands	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002814:	6a1a      	ldr	r2, [r3, #32]
 8002816:	4b46      	ldr	r3, [pc, #280]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	0249      	lsls	r1, r1, #9
 800281c:	430a      	orrs	r2, r1
 800281e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002820:	4b43      	ldr	r3, [pc, #268]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002822:	6a1a      	ldr	r2, [r3, #32]
 8002824:	4b42      	ldr	r3, [pc, #264]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002826:	4945      	ldr	r1, [pc, #276]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002828:	400a      	ands	r2, r1
 800282a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800282c:	4b40      	ldr	r3, [pc, #256]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	4013      	ands	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7fe f8bf 	bl	80009bc <HAL_GetTick>
 800283e:	0003      	movs	r3, r0
 8002840:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002842:	e009      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002844:	f7fe f8ba 	bl	80009bc <HAL_GetTick>
 8002848:	0002      	movs	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	4a3c      	ldr	r2, [pc, #240]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e067      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	4b35      	ldr	r3, [pc, #212]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	2202      	movs	r2, #2
 800285e:	4013      	ands	r3, r2
 8002860:	d0f0      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002862:	4b33      	ldr	r3, [pc, #204]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4a34      	ldr	r2, [pc, #208]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4b2f      	ldr	r3, [pc, #188]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002872:	430a      	orrs	r2, r1
 8002874:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002876:	2317      	movs	r3, #23
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002886:	492f      	ldr	r1, [pc, #188]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002888:	400a      	ands	r2, r1
 800288a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2201      	movs	r2, #1
 8002892:	4013      	ands	r3, r2
 8002894:	d009      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	2203      	movs	r2, #3
 800289c:	4393      	bics	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028a6:	430a      	orrs	r2, r1
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2202      	movs	r2, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028b4:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	4a23      	ldr	r2, [pc, #140]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028c4:	430a      	orrs	r2, r1
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2220      	movs	r2, #32
 80028ce:	4013      	ands	r3, r2
 80028d0:	d009      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	2210      	movs	r2, #16
 80028d8:	4393      	bics	r3, r2
 80028da:	0019      	movs	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028e2:	430a      	orrs	r2, r1
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	029b      	lsls	r3, r3, #10
 80028ee:	4013      	ands	r3, r2
 80028f0:	d009      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	2280      	movs	r2, #128	; 0x80
 80028f8:	4393      	bics	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002902:	430a      	orrs	r2, r1
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	2380      	movs	r3, #128	; 0x80
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4013      	ands	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	4393      	bics	r3, r2
 800291a:	0019      	movs	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002922:	430a      	orrs	r2, r1
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	0018      	movs	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	b006      	add	sp, #24
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	40007000 	.word	0x40007000
 8002938:	fffffcff 	.word	0xfffffcff
 800293c:	fffeffff 	.word	0xfffeffff
 8002940:	00001388 	.word	0x00001388
 8002944:	efffffff 	.word	0xefffffff
 8002948:	fffcffff 	.word	0xfffcffff

0800294c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e044      	b.n	80029e8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002962:	2b00      	cmp	r3, #0
 8002964:	d107      	bne.n	8002976 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2274      	movs	r2, #116	; 0x74
 800296a:	2100      	movs	r1, #0
 800296c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	0018      	movs	r0, r3
 8002972:	f7fd fef3 	bl	800075c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2224      	movs	r2, #36	; 0x24
 800297a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2101      	movs	r1, #1
 8002988:	438a      	bics	r2, r1
 800298a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0018      	movs	r0, r3
 8002990:	f000 f956 	bl	8002c40 <UART_SetConfig>
 8002994:	0003      	movs	r3, r0
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e024      	b.n	80029e8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 fad1 	bl	8002f50 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	490d      	ldr	r1, [pc, #52]	; (80029f0 <HAL_UART_Init+0xa4>)
 80029ba:	400a      	ands	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	212a      	movs	r1, #42	; 0x2a
 80029ca:	438a      	bics	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2101      	movs	r1, #1
 80029da:	430a      	orrs	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 fb69 	bl	80030b8 <UART_CheckIdleState>
 80029e6:	0003      	movs	r3, r0
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	ffffb7ff 	.word	0xffffb7ff

080029f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	1dbb      	adds	r3, r7, #6
 8002a02:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d000      	beq.n	8002a0e <HAL_UART_Transmit+0x1a>
 8002a0c:	e096      	b.n	8002b3c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_UART_Transmit+0x28>
 8002a14:	1dbb      	adds	r3, r7, #6
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e08e      	b.n	8002b3e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	015b      	lsls	r3, r3, #5
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d109      	bne.n	8002a40 <HAL_UART_Transmit+0x4c>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2201      	movs	r2, #1
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d001      	beq.n	8002a40 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e07e      	b.n	8002b3e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2274      	movs	r2, #116	; 0x74
 8002a44:	5c9b      	ldrb	r3, [r3, r2]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_UART_Transmit+0x5a>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e077      	b.n	8002b3e <HAL_UART_Transmit+0x14a>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2274      	movs	r2, #116	; 0x74
 8002a52:	2101      	movs	r1, #1
 8002a54:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2221      	movs	r2, #33	; 0x21
 8002a62:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a64:	f7fd ffaa 	bl	80009bc <HAL_GetTick>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1dba      	adds	r2, r7, #6
 8002a70:	2150      	movs	r1, #80	; 0x50
 8002a72:	8812      	ldrh	r2, [r2, #0]
 8002a74:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1dba      	adds	r2, r7, #6
 8002a7a:	2152      	movs	r1, #82	; 0x52
 8002a7c:	8812      	ldrh	r2, [r2, #0]
 8002a7e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	015b      	lsls	r3, r3, #5
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d108      	bne.n	8002a9e <HAL_UART_Transmit+0xaa>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d104      	bne.n	8002a9e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	e003      	b.n	8002aa6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2274      	movs	r2, #116	; 0x74
 8002aaa:	2100      	movs	r1, #0
 8002aac:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002aae:	e02d      	b.n	8002b0c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	0013      	movs	r3, r2
 8002aba:	2200      	movs	r2, #0
 8002abc:	2180      	movs	r1, #128	; 0x80
 8002abe:	f000 fb43 	bl	8003148 <UART_WaitOnFlagUntilTimeout>
 8002ac2:	1e03      	subs	r3, r0, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e039      	b.n	8002b3e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10b      	bne.n	8002ae8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	881a      	ldrh	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	05d2      	lsls	r2, r2, #23
 8002ada:	0dd2      	lsrs	r2, r2, #23
 8002adc:	b292      	uxth	r2, r2
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	e008      	b.n	8002afa <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b292      	uxth	r2, r2
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	3301      	adds	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2252      	movs	r2, #82	; 0x52
 8002afe:	5a9b      	ldrh	r3, [r3, r2]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b299      	uxth	r1, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2252      	movs	r2, #82	; 0x52
 8002b0a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2252      	movs	r2, #82	; 0x52
 8002b10:	5a9b      	ldrh	r3, [r3, r2]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1cb      	bne.n	8002ab0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	0013      	movs	r3, r2
 8002b22:	2200      	movs	r2, #0
 8002b24:	2140      	movs	r1, #64	; 0x40
 8002b26:	f000 fb0f 	bl	8003148 <UART_WaitOnFlagUntilTimeout>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e005      	b.n	8002b3e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e000      	b.n	8002b3e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
  }
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b008      	add	sp, #32
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b088      	sub	sp, #32
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	1dbb      	adds	r3, r7, #6
 8002b52:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d150      	bne.n	8002bfe <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_UART_Receive_DMA+0x24>
 8002b62:	1dbb      	adds	r3, r7, #6
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e048      	b.n	8002c00 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	015b      	lsls	r3, r3, #5
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d109      	bne.n	8002b8e <HAL_UART_Receive_DMA+0x48>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d105      	bne.n	8002b8e <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2201      	movs	r2, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	d001      	beq.n	8002b8e <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e038      	b.n	8002c00 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2274      	movs	r2, #116	; 0x74
 8002b92:	5c9b      	ldrb	r3, [r3, r2]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_UART_Receive_DMA+0x56>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e031      	b.n	8002c00 <HAL_UART_Receive_DMA+0xba>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2274      	movs	r2, #116	; 0x74
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	041b      	lsls	r3, r3, #16
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d019      	beq.n	8002bec <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bbc:	613b      	str	r3, [r7, #16]
  return(result);
 8002bbe:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f383 8810 	msr	PRIMASK, r3
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2180      	movs	r1, #128	; 0x80
 8002bda:	04c9      	lsls	r1, r1, #19
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f383 8810 	msr	PRIMASK, r3
}
 8002bea:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002bec:	1dbb      	adds	r3, r7, #6
 8002bee:	881a      	ldrh	r2, [r3, #0]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 fb6b 	bl	80032d0 <UART_Start_Receive_DMA>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	e000      	b.n	8002c00 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002bfe:	2302      	movs	r3, #2
  }
}
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b008      	add	sp, #32
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	000a      	movs	r2, r1
 8002c32:	1cbb      	adds	r3, r7, #2
 8002c34:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b002      	add	sp, #8
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c48:	231e      	movs	r3, #30
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4aaf      	ldr	r2, [pc, #700]	; (8002f2c <UART_SetConfig+0x2ec>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	4aaa      	ldr	r2, [pc, #680]	; (8002f30 <UART_SetConfig+0x2f0>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4aa1      	ldr	r2, [pc, #644]	; (8002f34 <UART_SetConfig+0x2f4>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a9d      	ldr	r2, [pc, #628]	; (8002f38 <UART_SetConfig+0x2f8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d127      	bne.n	8002d16 <UART_SetConfig+0xd6>
 8002cc6:	4b9d      	ldr	r3, [pc, #628]	; (8002f3c <UART_SetConfig+0x2fc>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	2203      	movs	r2, #3
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d00d      	beq.n	8002cee <UART_SetConfig+0xae>
 8002cd2:	d81b      	bhi.n	8002d0c <UART_SetConfig+0xcc>
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d014      	beq.n	8002d02 <UART_SetConfig+0xc2>
 8002cd8:	d818      	bhi.n	8002d0c <UART_SetConfig+0xcc>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <UART_SetConfig+0xa4>
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d00a      	beq.n	8002cf8 <UART_SetConfig+0xb8>
 8002ce2:	e013      	b.n	8002d0c <UART_SetConfig+0xcc>
 8002ce4:	231f      	movs	r3, #31
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e065      	b.n	8002dba <UART_SetConfig+0x17a>
 8002cee:	231f      	movs	r3, #31
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e060      	b.n	8002dba <UART_SetConfig+0x17a>
 8002cf8:	231f      	movs	r3, #31
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e05b      	b.n	8002dba <UART_SetConfig+0x17a>
 8002d02:	231f      	movs	r3, #31
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	2208      	movs	r2, #8
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e056      	b.n	8002dba <UART_SetConfig+0x17a>
 8002d0c:	231f      	movs	r3, #31
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	2210      	movs	r2, #16
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e051      	b.n	8002dba <UART_SetConfig+0x17a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a89      	ldr	r2, [pc, #548]	; (8002f40 <UART_SetConfig+0x300>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d134      	bne.n	8002d8a <UART_SetConfig+0x14a>
 8002d20:	4b86      	ldr	r3, [pc, #536]	; (8002f3c <UART_SetConfig+0x2fc>)
 8002d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d24:	23c0      	movs	r3, #192	; 0xc0
 8002d26:	029b      	lsls	r3, r3, #10
 8002d28:	4013      	ands	r3, r2
 8002d2a:	22c0      	movs	r2, #192	; 0xc0
 8002d2c:	0292      	lsls	r2, r2, #10
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d017      	beq.n	8002d62 <UART_SetConfig+0x122>
 8002d32:	22c0      	movs	r2, #192	; 0xc0
 8002d34:	0292      	lsls	r2, r2, #10
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d822      	bhi.n	8002d80 <UART_SetConfig+0x140>
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	0292      	lsls	r2, r2, #10
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d019      	beq.n	8002d76 <UART_SetConfig+0x136>
 8002d42:	2280      	movs	r2, #128	; 0x80
 8002d44:	0292      	lsls	r2, r2, #10
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d81a      	bhi.n	8002d80 <UART_SetConfig+0x140>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d004      	beq.n	8002d58 <UART_SetConfig+0x118>
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	0252      	lsls	r2, r2, #9
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00a      	beq.n	8002d6c <UART_SetConfig+0x12c>
 8002d56:	e013      	b.n	8002d80 <UART_SetConfig+0x140>
 8002d58:	231f      	movs	r3, #31
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	e02b      	b.n	8002dba <UART_SetConfig+0x17a>
 8002d62:	231f      	movs	r3, #31
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	2202      	movs	r2, #2
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	e026      	b.n	8002dba <UART_SetConfig+0x17a>
 8002d6c:	231f      	movs	r3, #31
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	2204      	movs	r2, #4
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e021      	b.n	8002dba <UART_SetConfig+0x17a>
 8002d76:	231f      	movs	r3, #31
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e01c      	b.n	8002dba <UART_SetConfig+0x17a>
 8002d80:	231f      	movs	r3, #31
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	2210      	movs	r2, #16
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e017      	b.n	8002dba <UART_SetConfig+0x17a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6d      	ldr	r2, [pc, #436]	; (8002f44 <UART_SetConfig+0x304>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d104      	bne.n	8002d9e <UART_SetConfig+0x15e>
 8002d94:	231f      	movs	r3, #31
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	e00d      	b.n	8002dba <UART_SetConfig+0x17a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a69      	ldr	r2, [pc, #420]	; (8002f48 <UART_SetConfig+0x308>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d104      	bne.n	8002db2 <UART_SetConfig+0x172>
 8002da8:	231f      	movs	r3, #31
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e003      	b.n	8002dba <UART_SetConfig+0x17a>
 8002db2:	231f      	movs	r3, #31
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	2210      	movs	r2, #16
 8002db8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d15d      	bne.n	8002e82 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8002dc6:	231f      	movs	r3, #31
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d015      	beq.n	8002dfc <UART_SetConfig+0x1bc>
 8002dd0:	dc18      	bgt.n	8002e04 <UART_SetConfig+0x1c4>
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d00d      	beq.n	8002df2 <UART_SetConfig+0x1b2>
 8002dd6:	dc15      	bgt.n	8002e04 <UART_SetConfig+0x1c4>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <UART_SetConfig+0x1a2>
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d005      	beq.n	8002dec <UART_SetConfig+0x1ac>
 8002de0:	e010      	b.n	8002e04 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002de2:	f7ff fc9f 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 8002de6:	0003      	movs	r3, r0
 8002de8:	61bb      	str	r3, [r7, #24]
        break;
 8002dea:	e012      	b.n	8002e12 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dec:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <UART_SetConfig+0x30c>)
 8002dee:	61bb      	str	r3, [r7, #24]
        break;
 8002df0:	e00f      	b.n	8002e12 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002df2:	f7ff fc0d 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 8002df6:	0003      	movs	r3, r0
 8002df8:	61bb      	str	r3, [r7, #24]
        break;
 8002dfa:	e00a      	b.n	8002e12 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	61bb      	str	r3, [r7, #24]
        break;
 8002e02:	e006      	b.n	8002e12 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e08:	231e      	movs	r3, #30
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
        break;
 8002e10:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d100      	bne.n	8002e1a <UART_SetConfig+0x1da>
 8002e18:	e07b      	b.n	8002f12 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	005a      	lsls	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	18d2      	adds	r2, r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	0010      	movs	r0, r2
 8002e2e:	f7fd f96b 	bl	8000108 <__udivsi3>
 8002e32:	0003      	movs	r3, r0
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d91c      	bls.n	8002e78 <UART_SetConfig+0x238>
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	025b      	lsls	r3, r3, #9
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d217      	bcs.n	8002e78 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	200e      	movs	r0, #14
 8002e4e:	183b      	adds	r3, r7, r0
 8002e50:	210f      	movs	r1, #15
 8002e52:	438a      	bics	r2, r1
 8002e54:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	4013      	ands	r3, r2
 8002e60:	b299      	uxth	r1, r3
 8002e62:	183b      	adds	r3, r7, r0
 8002e64:	183a      	adds	r2, r7, r0
 8002e66:	8812      	ldrh	r2, [r2, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	183a      	adds	r2, r7, r0
 8002e72:	8812      	ldrh	r2, [r2, #0]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	e04c      	b.n	8002f12 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002e78:	231e      	movs	r3, #30
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e047      	b.n	8002f12 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e82:	231f      	movs	r3, #31
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d015      	beq.n	8002eb8 <UART_SetConfig+0x278>
 8002e8c:	dc18      	bgt.n	8002ec0 <UART_SetConfig+0x280>
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d00d      	beq.n	8002eae <UART_SetConfig+0x26e>
 8002e92:	dc15      	bgt.n	8002ec0 <UART_SetConfig+0x280>
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <UART_SetConfig+0x25e>
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d005      	beq.n	8002ea8 <UART_SetConfig+0x268>
 8002e9c:	e010      	b.n	8002ec0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e9e:	f7ff fc41 	bl	8002724 <HAL_RCC_GetPCLK1Freq>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	61bb      	str	r3, [r7, #24]
        break;
 8002ea6:	e012      	b.n	8002ece <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ea8:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <UART_SetConfig+0x30c>)
 8002eaa:	61bb      	str	r3, [r7, #24]
        break;
 8002eac:	e00f      	b.n	8002ece <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eae:	f7ff fbaf 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	61bb      	str	r3, [r7, #24]
        break;
 8002eb6:	e00a      	b.n	8002ece <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eb8:	2380      	movs	r3, #128	; 0x80
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	61bb      	str	r3, [r7, #24]
        break;
 8002ebe:	e006      	b.n	8002ece <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ec4:	231e      	movs	r3, #30
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
        break;
 8002ecc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01e      	beq.n	8002f12 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	085a      	lsrs	r2, r3, #1
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	18d2      	adds	r2, r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	0010      	movs	r0, r2
 8002ee6:	f7fd f90f 	bl	8000108 <__udivsi3>
 8002eea:	0003      	movs	r3, r0
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b0f      	cmp	r3, #15
 8002ef4:	d909      	bls.n	8002f0a <UART_SetConfig+0x2ca>
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	025b      	lsls	r3, r3, #9
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d204      	bcs.n	8002f0a <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	60da      	str	r2, [r3, #12]
 8002f08:	e003      	b.n	8002f12 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8002f0a:	231e      	movs	r3, #30
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f1e:	231e      	movs	r3, #30
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	781b      	ldrb	r3, [r3, #0]
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b008      	add	sp, #32
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	efff69f3 	.word	0xefff69f3
 8002f30:	ffffcfff 	.word	0xffffcfff
 8002f34:	fffff4ff 	.word	0xfffff4ff
 8002f38:	40013800 	.word	0x40013800
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40004400 	.word	0x40004400
 8002f44:	40004800 	.word	0x40004800
 8002f48:	40004c00 	.word	0x40004c00
 8002f4c:	007a1200 	.word	0x007a1200

08002f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <UART_AdvFeatureConfig+0x144>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2202      	movs	r2, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a43      	ldr	r2, [pc, #268]	; (8003098 <UART_AdvFeatureConfig+0x148>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d00b      	beq.n	8002fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a3b      	ldr	r2, [pc, #236]	; (800309c <UART_AdvFeatureConfig+0x14c>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d00b      	beq.n	8002fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a34      	ldr	r2, [pc, #208]	; (80030a0 <UART_AdvFeatureConfig+0x150>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d00b      	beq.n	8003002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a2c      	ldr	r2, [pc, #176]	; (80030a4 <UART_AdvFeatureConfig+0x154>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2220      	movs	r2, #32
 8003008:	4013      	ands	r3, r2
 800300a:	d00b      	beq.n	8003024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	4a25      	ldr	r2, [pc, #148]	; (80030a8 <UART_AdvFeatureConfig+0x158>)
 8003014:	4013      	ands	r3, r2
 8003016:	0019      	movs	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2240      	movs	r2, #64	; 0x40
 800302a:	4013      	ands	r3, r2
 800302c:	d01d      	beq.n	800306a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <UART_AdvFeatureConfig+0x15c>)
 8003036:	4013      	ands	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	035b      	lsls	r3, r3, #13
 800304e:	429a      	cmp	r2, r3
 8003050:	d10b      	bne.n	800306a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <UART_AdvFeatureConfig+0x160>)
 800305a:	4013      	ands	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	4013      	ands	r3, r2
 8003072:	d00b      	beq.n	800308c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <UART_AdvFeatureConfig+0x164>)
 800307c:	4013      	ands	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  }
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}
 8003094:	fffdffff 	.word	0xfffdffff
 8003098:	fffeffff 	.word	0xfffeffff
 800309c:	fffbffff 	.word	0xfffbffff
 80030a0:	ffff7fff 	.word	0xffff7fff
 80030a4:	ffffefff 	.word	0xffffefff
 80030a8:	ffffdfff 	.word	0xffffdfff
 80030ac:	ffefffff 	.word	0xffefffff
 80030b0:	ff9fffff 	.word	0xff9fffff
 80030b4:	fff7ffff 	.word	0xfff7ffff

080030b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af02      	add	r7, sp, #8
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	2100      	movs	r1, #0
 80030c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030c8:	f7fd fc78 	bl	80009bc <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2208      	movs	r2, #8
 80030d8:	4013      	ands	r3, r2
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d10c      	bne.n	80030f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2280      	movs	r2, #128	; 0x80
 80030e2:	0391      	lsls	r1, r2, #14
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4a17      	ldr	r2, [pc, #92]	; (8003144 <UART_CheckIdleState+0x8c>)
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f000 f82c 	bl	8003148 <UART_WaitOnFlagUntilTimeout>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d001      	beq.n	80030f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e021      	b.n	800313c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2204      	movs	r2, #4
 8003100:	4013      	ands	r3, r2
 8003102:	2b04      	cmp	r3, #4
 8003104:	d10c      	bne.n	8003120 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	03d1      	lsls	r1, r2, #15
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <UART_CheckIdleState+0x8c>)
 8003110:	9200      	str	r2, [sp, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	f000 f818 	bl	8003148 <UART_WaitOnFlagUntilTimeout>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d001      	beq.n	8003120 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e00d      	b.n	800313c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2274      	movs	r2, #116	; 0x74
 8003136:	2100      	movs	r1, #0
 8003138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b004      	add	sp, #16
 8003142:	bd80      	pop	{r7, pc}
 8003144:	01ffffff 	.word	0x01ffffff

08003148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b094      	sub	sp, #80	; 0x50
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	1dfb      	adds	r3, r7, #7
 8003156:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003158:	e0a3      	b.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800315c:	3301      	adds	r3, #1
 800315e:	d100      	bne.n	8003162 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003160:	e09f      	b.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fd fc2b 	bl	80009bc <HAL_GetTick>
 8003166:	0002      	movs	r2, r0
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <UART_WaitOnFlagUntilTimeout+0x30>
 8003172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003174:	2b00      	cmp	r3, #0
 8003176:	d13d      	bne.n	80031f4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003178:	f3ef 8310 	mrs	r3, PRIMASK
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003180:	647b      	str	r3, [r7, #68]	; 0x44
 8003182:	2301      	movs	r3, #1
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	f383 8810 	msr	PRIMASK, r3
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	494c      	ldr	r1, [pc, #304]	; (80032cc <UART_WaitOnFlagUntilTimeout+0x184>)
 800319a:	400a      	ands	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	f383 8810 	msr	PRIMASK, r3
}
 80031a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031aa:	f3ef 8310 	mrs	r3, PRIMASK
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b2:	643b      	str	r3, [r7, #64]	; 0x40
 80031b4:	2301      	movs	r3, #1
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	f383 8810 	msr	PRIMASK, r3
}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2101      	movs	r1, #1
 80031cc:	438a      	bics	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d6:	f383 8810 	msr	PRIMASK, r3
}
 80031da:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2274      	movs	r2, #116	; 0x74
 80031ec:	2100      	movs	r1, #0
 80031ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e067      	b.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2204      	movs	r2, #4
 80031fc:	4013      	ands	r3, r2
 80031fe:	d050      	beq.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	401a      	ands	r2, r3
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	429a      	cmp	r2, r3
 8003212:	d146      	bne.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2280      	movs	r2, #128	; 0x80
 800321a:	0112      	lsls	r2, r2, #4
 800321c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800321e:	f3ef 8310 	mrs	r3, PRIMASK
 8003222:	613b      	str	r3, [r7, #16]
  return(result);
 8003224:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003228:	2301      	movs	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4923      	ldr	r1, [pc, #140]	; (80032cc <UART_WaitOnFlagUntilTimeout+0x184>)
 8003240:	400a      	ands	r2, r1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003246:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f383 8810 	msr	PRIMASK, r3
}
 800324e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003250:	f3ef 8310 	mrs	r3, PRIMASK
 8003254:	61fb      	str	r3, [r7, #28]
  return(result);
 8003256:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003258:	64bb      	str	r3, [r7, #72]	; 0x48
 800325a:	2301      	movs	r3, #1
 800325c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f383 8810 	msr	PRIMASK, r3
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2101      	movs	r1, #1
 8003272:	438a      	bics	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	f383 8810 	msr	PRIMASK, r3
}
 8003280:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	2120      	movs	r1, #32
 8003294:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2274      	movs	r2, #116	; 0x74
 800329a:	2100      	movs	r1, #0
 800329c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e010      	b.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	4013      	ands	r3, r2
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	425a      	negs	r2, r3
 80032b2:	4153      	adcs	r3, r2
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	001a      	movs	r2, r3
 80032b8:	1dfb      	adds	r3, r7, #7
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d100      	bne.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80032c0:	e74b      	b.n	800315a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b014      	add	sp, #80	; 0x50
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	fffffe5f 	.word	0xfffffe5f

080032d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b090      	sub	sp, #64	; 0x40
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	1dbb      	adds	r3, r7, #6
 80032dc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1dba      	adds	r2, r7, #6
 80032e8:	2158      	movs	r1, #88	; 0x58
 80032ea:	8812      	ldrh	r2, [r2, #0]
 80032ec:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	2100      	movs	r1, #0
 80032f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2222      	movs	r2, #34	; 0x22
 80032fa:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	2b00      	cmp	r3, #0
 8003302:	d02b      	beq.n	800335c <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a3f      	ldr	r2, [pc, #252]	; (8003408 <UART_Start_Receive_DMA+0x138>)
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	4a3e      	ldr	r2, [pc, #248]	; (800340c <UART_Start_Receive_DMA+0x13c>)
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	4a3d      	ldr	r2, [pc, #244]	; (8003410 <UART_Start_Receive_DMA+0x140>)
 800331a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	2200      	movs	r2, #0
 8003322:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3324      	adds	r3, #36	; 0x24
 800332e:	0019      	movs	r1, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003334:	001a      	movs	r2, r3
 8003336:	1dbb      	adds	r3, r7, #6
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	f7fe fa23 	bl	8001784 <HAL_DMA_Start_IT>
 800333e:	1e03      	subs	r3, r0, #0
 8003340:	d00c      	beq.n	800335c <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2280      	movs	r2, #128	; 0x80
 8003346:	2110      	movs	r1, #16
 8003348:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2274      	movs	r2, #116	; 0x74
 800334e:	2100      	movs	r1, #0
 8003350:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e050      	b.n	80033fe <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2274      	movs	r2, #116	; 0x74
 8003360:	2100      	movs	r1, #0
 8003362:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003364:	f3ef 8310 	mrs	r3, PRIMASK
 8003368:	613b      	str	r3, [r7, #16]
  return(result);
 800336a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800336c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800336e:	2301      	movs	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f383 8810 	msr	PRIMASK, r3
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2180      	movs	r1, #128	; 0x80
 8003386:	0049      	lsls	r1, r1, #1
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f383 8810 	msr	PRIMASK, r3
}
 8003396:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003398:	f3ef 8310 	mrs	r3, PRIMASK
 800339c:	61fb      	str	r3, [r7, #28]
  return(result);
 800339e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80033a2:	2301      	movs	r3, #1
 80033a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	f383 8810 	msr	PRIMASK, r3
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2101      	movs	r1, #1
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	f383 8810 	msr	PRIMASK, r3
}
 80033c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ca:	f3ef 8310 	mrs	r3, PRIMASK
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d2:	637b      	str	r3, [r7, #52]	; 0x34
 80033d4:	2301      	movs	r3, #1
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	f383 8810 	msr	PRIMASK, r3
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2140      	movs	r1, #64	; 0x40
 80033ec:	430a      	orrs	r2, r1
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	f383 8810 	msr	PRIMASK, r3
}
 80033fa:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b010      	add	sp, #64	; 0x40
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	08003521 	.word	0x08003521
 800340c:	08003645 	.word	0x08003645
 8003410:	08003681 	.word	0x08003681

08003414 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341c:	f3ef 8310 	mrs	r3, PRIMASK
 8003420:	60bb      	str	r3, [r7, #8]
  return(result);
 8003422:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	2301      	movs	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f383 8810 	msr	PRIMASK, r3
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	21c0      	movs	r1, #192	; 0xc0
 800343e:	438a      	bics	r2, r1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f383 8810 	msr	PRIMASK, r3
}
 800344c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b006      	add	sp, #24
 800345a:	bd80      	pop	{r7, pc}

0800345c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003464:	f3ef 8310 	mrs	r3, PRIMASK
 8003468:	617b      	str	r3, [r7, #20]
  return(result);
 800346a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800346c:	637b      	str	r3, [r7, #52]	; 0x34
 800346e:	2301      	movs	r3, #1
 8003470:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f383 8810 	msr	PRIMASK, r3
}
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4925      	ldr	r1, [pc, #148]	; (800351c <UART_EndRxTransfer+0xc0>)
 8003486:	400a      	ands	r2, r1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f383 8810 	msr	PRIMASK, r3
}
 8003494:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003496:	f3ef 8310 	mrs	r3, PRIMASK
 800349a:	623b      	str	r3, [r7, #32]
  return(result);
 800349c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
 80034a0:	2301      	movs	r3, #1
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2101      	movs	r1, #1
 80034b8:	438a      	bics	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	f383 8810 	msr	PRIMASK, r3
}
 80034c6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d118      	bne.n	8003502 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d0:	f3ef 8310 	mrs	r3, PRIMASK
 80034d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80034d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034da:	2301      	movs	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f383 8810 	msr	PRIMASK, r3
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2110      	movs	r1, #16
 80034f2:	438a      	bics	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f383 8810 	msr	PRIMASK, r3
}
 8003500:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b00e      	add	sp, #56	; 0x38
 800351a:	bd80      	pop	{r7, pc}
 800351c:	fffffedf 	.word	0xfffffedf

08003520 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b094      	sub	sp, #80	; 0x50
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b20      	cmp	r3, #32
 8003534:	d06e      	beq.n	8003614 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8003536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003538:	225a      	movs	r2, #90	; 0x5a
 800353a:	2100      	movs	r1, #0
 800353c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	61bb      	str	r3, [r7, #24]
  return(result);
 8003544:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003546:	64bb      	str	r3, [r7, #72]	; 0x48
 8003548:	2301      	movs	r3, #1
 800354a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f383 8810 	msr	PRIMASK, r3
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4938      	ldr	r1, [pc, #224]	; (8003640 <UART_DMAReceiveCplt+0x120>)
 8003560:	400a      	ands	r2, r1
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003566:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003570:	f3ef 8310 	mrs	r3, PRIMASK
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003578:	647b      	str	r3, [r7, #68]	; 0x44
 800357a:	2301      	movs	r3, #1
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003580:	f383 8810 	msr	PRIMASK, r3
}
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2101      	movs	r1, #1
 8003592:	438a      	bics	r2, r1
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	f383 8810 	msr	PRIMASK, r3
}
 80035a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a2:	f3ef 8310 	mrs	r3, PRIMASK
 80035a6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035aa:	643b      	str	r3, [r7, #64]	; 0x40
 80035ac:	2301      	movs	r3, #1
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	f383 8810 	msr	PRIMASK, r3
}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2140      	movs	r1, #64	; 0x40
 80035c4:	438a      	bics	r2, r1
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	f383 8810 	msr	PRIMASK, r3
}
 80035d2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d6:	2220      	movs	r2, #32
 80035d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d118      	bne.n	8003614 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e2:	f3ef 8310 	mrs	r3, PRIMASK
 80035e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80035e8:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ec:	2301      	movs	r3, #1
 80035ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f383 8810 	msr	PRIMASK, r3
}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2110      	movs	r1, #16
 8003604:	438a      	bics	r2, r1
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003618:	2b01      	cmp	r3, #1
 800361a:	d108      	bne.n	800362e <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800361c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361e:	2258      	movs	r2, #88	; 0x58
 8003620:	5a9a      	ldrh	r2, [r3, r2]
 8003622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003624:	0011      	movs	r1, r2
 8003626:	0018      	movs	r0, r3
 8003628:	f7ff fafe 	bl	8002c28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800362c:	e003      	b.n	8003636 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 800362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003630:	0018      	movs	r0, r3
 8003632:	f7fc ffd5 	bl	80005e0 <HAL_UART_RxCpltCallback>
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b014      	add	sp, #80	; 0x50
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	fffffeff 	.word	0xfffffeff

08003644 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003656:	2b01      	cmp	r3, #1
 8003658:	d10a      	bne.n	8003670 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2258      	movs	r2, #88	; 0x58
 800365e:	5a9b      	ldrh	r3, [r3, r2]
 8003660:	085b      	lsrs	r3, r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	0011      	movs	r1, r2
 8003668:	0018      	movs	r0, r3
 800366a:	f7ff fadd 	bl	8002c28 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800366e:	e003      	b.n	8003678 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	0018      	movs	r0, r3
 8003674:	f7ff fac8 	bl	8002c08 <HAL_UART_RxHalfCpltCallback>
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b004      	add	sp, #16
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003692:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003698:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2280      	movs	r2, #128	; 0x80
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b80      	cmp	r3, #128	; 0x80
 80036a6:	d10a      	bne.n	80036be <UART_DMAError+0x3e>
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	2b21      	cmp	r3, #33	; 0x21
 80036ac:	d107      	bne.n	80036be <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2252      	movs	r2, #82	; 0x52
 80036b2:	2100      	movs	r1, #0
 80036b4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7ff feab 	bl	8003414 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2240      	movs	r2, #64	; 0x40
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d10a      	bne.n	80036e2 <UART_DMAError+0x62>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b22      	cmp	r3, #34	; 0x22
 80036d0:	d107      	bne.n	80036e2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	225a      	movs	r2, #90	; 0x5a
 80036d6:	2100      	movs	r1, #0
 80036d8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	0018      	movs	r0, r3
 80036de:	f7ff febd 	bl	800345c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2280      	movs	r2, #128	; 0x80
 80036e6:	589b      	ldr	r3, [r3, r2]
 80036e8:	2210      	movs	r2, #16
 80036ea:	431a      	orrs	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2180      	movs	r1, #128	; 0x80
 80036f0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff fa8f 	bl	8002c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b006      	add	sp, #24
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <__libc_init_array>:
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	2600      	movs	r6, #0
 8003708:	4d0c      	ldr	r5, [pc, #48]	; (800373c <__libc_init_array+0x38>)
 800370a:	4c0d      	ldr	r4, [pc, #52]	; (8003740 <__libc_init_array+0x3c>)
 800370c:	1b64      	subs	r4, r4, r5
 800370e:	10a4      	asrs	r4, r4, #2
 8003710:	42a6      	cmp	r6, r4
 8003712:	d109      	bne.n	8003728 <__libc_init_array+0x24>
 8003714:	2600      	movs	r6, #0
 8003716:	f000 f821 	bl	800375c <_init>
 800371a:	4d0a      	ldr	r5, [pc, #40]	; (8003744 <__libc_init_array+0x40>)
 800371c:	4c0a      	ldr	r4, [pc, #40]	; (8003748 <__libc_init_array+0x44>)
 800371e:	1b64      	subs	r4, r4, r5
 8003720:	10a4      	asrs	r4, r4, #2
 8003722:	42a6      	cmp	r6, r4
 8003724:	d105      	bne.n	8003732 <__libc_init_array+0x2e>
 8003726:	bd70      	pop	{r4, r5, r6, pc}
 8003728:	00b3      	lsls	r3, r6, #2
 800372a:	58eb      	ldr	r3, [r5, r3]
 800372c:	4798      	blx	r3
 800372e:	3601      	adds	r6, #1
 8003730:	e7ee      	b.n	8003710 <__libc_init_array+0xc>
 8003732:	00b3      	lsls	r3, r6, #2
 8003734:	58eb      	ldr	r3, [r5, r3]
 8003736:	4798      	blx	r3
 8003738:	3601      	adds	r6, #1
 800373a:	e7f2      	b.n	8003722 <__libc_init_array+0x1e>
 800373c:	080037c0 	.word	0x080037c0
 8003740:	080037c0 	.word	0x080037c0
 8003744:	080037c0 	.word	0x080037c0
 8003748:	080037c4 	.word	0x080037c4

0800374c <memset>:
 800374c:	0003      	movs	r3, r0
 800374e:	1882      	adds	r2, r0, r2
 8003750:	4293      	cmp	r3, r2
 8003752:	d100      	bne.n	8003756 <memset+0xa>
 8003754:	4770      	bx	lr
 8003756:	7019      	strb	r1, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	e7f9      	b.n	8003750 <memset+0x4>

0800375c <_init>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr

08003768 <_fini>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr
